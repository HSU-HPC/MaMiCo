// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<CouplingCell, dim>::allocateReceiveBuffers(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                         const I00* const globalCellIndices, unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReceiveBuffers(dataExchange, globalCellIndices[i]);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<CouplingCell, dim>::readFromReceiveBuffer(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                        const std::vector<CouplingCell*>& couplingCells,
                                                                                        const I00* const globalCellIndices) {
  const unsigned int numberCells = (unsigned int)couplingCells.size();
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromReceiveBuffer(dataExchange, *couplingCells[i], globalCellIndices[i]);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<CouplingCell, dim>::sendFromMD2Macro(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                   const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                   const I00* const globalCellIndicesFromMacroscopicSolver) {
  sendFromMD2MacroNonBlocking(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  wait4SendFromMD2Macro(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<CouplingCell, dim>::sendFromMD2MacroNonBlocking(
    coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange, const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
    const I00* const globalCellIndicesFromMacroscopicSolver) {
  const unsigned int numberCellsFromMacroscopicSolver = (unsigned int)couplingCellsFromMacroscopicSolver.size();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(dataExchange, globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  // fill the send buffers
  // writeToSendBuffer(dataExchange,couplingCellsFromMamico); // no sending

  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateRequests();

  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerReceiving(dataExchange);
  // coupling::sendrecv::SendReceiveBuffer<CouplingCell,dim>::triggerSending(dataExchange); // no sending
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<CouplingCell, dim>::wait4SendFromMD2Macro(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                        const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                        const I00* const globalCellIndicesFromMacroscopicSolver) {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllOperations();

  // fill information from receive buffers into the coupling cells
  readFromReceiveBuffer(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}
