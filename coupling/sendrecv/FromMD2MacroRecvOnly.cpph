// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<MacroscopicCell, dim>::allocateReceiveBuffers(
    const coupling::IndexConversion<dim>& indexConversion, coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
    const unsigned int* const globalCellIndices, unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);

    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::allocateReceiveBuffers(dataExchange, globalVectorIndex);
  }
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<MacroscopicCell, dim>::readFromReceiveBuffer(const coupling::IndexConversion<dim>& indexConversion,
                                                                                           coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
                                                                                           const std::vector<MacroscopicCell*>& macroscopicCells,
                                                                                           const unsigned int* const globalCellIndices) {
  const unsigned int numberCells = (unsigned int)macroscopicCells.size();

#if (COMM_DEBUG == COUPLING_MD_YES)
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  std::ofstream file;
  file.open(std::string("comm.log") + std::to_string(rank), std::ofstream::out | std::ofstream::app);
  file << "MD2MacroRecvOnly"
       << " MPI rank " << rank << " send global cell indices: [";
  for (unsigned int i = 0; i < numberCells; i++) {
    if (i > 0)
      file << ", ";
    file << globalCellIndices[i];
  }
  file << "]" << std::endl;
  file.flush();
  file.close();
#endif

  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::readFromReceiveBuffer(dataExchange, *macroscopicCells[i], globalVectorIndex);
  }
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<MacroscopicCell, dim>::sendFromMD2Macro(
    const coupling::IndexConversion<dim>& indexConversion, coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
    const std::vector<MacroscopicCell*>& macroscopicCellsFromMacroscopicSolver, const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  sendFromMD2MacroNonBlocking(indexConversion, dataExchange, macroscopicCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  wait4SendFromMD2Macro(indexConversion, dataExchange, macroscopicCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<MacroscopicCell, dim>::sendFromMD2MacroNonBlocking(
    const coupling::IndexConversion<dim>& indexConversion, coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
    const std::vector<MacroscopicCell*>& macroscopicCellsFromMacroscopicSolver, const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  const unsigned int numberCellsFromMacroscopicSolver = (unsigned int)macroscopicCellsFromMacroscopicSolver.size();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(indexConversion, dataExchange, globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  // fill the send buffers
  // writeToSendBuffer(indexConversion,dataExchange,macroscopicCellsFromMamico); // no sending

  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::allocateRequests();

  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::triggerReceiving(dataExchange);
  // coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::triggerSending(indexConversion,dataExchange); // no sending
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2MacroRecvOnly<MacroscopicCell, dim>::wait4SendFromMD2Macro(
    const coupling::IndexConversion<dim>& indexConversion, coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
    const std::vector<MacroscopicCell*>& macroscopicCellsFromMacroscopicSolver, const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::waitAllOperations();

  // fill information from receive buffers into the macroscopic cells
  readFromReceiveBuffer(indexConversion, dataExchange, macroscopicCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}
