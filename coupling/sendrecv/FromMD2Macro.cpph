// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

#pragma region collective operations

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::reduceFromMD2Macro(std::vector<coupling::sendrecv::DataExchangeFromMD2Macro<dim>*>& dataExchanges,
                                                                                const std::vector<MacroscopicCell*>& macroscopicCellsFromMacroscopicSolver,
                                                                                const unsigned int* const globalCellIndicesFromMacroscopicSolver,
                                                                                const std::vector<MacroscopicCell*>& sumMacroscopicCellsFromMamico) {
  const unsigned int rank = dataExchanges[0]->getIndexConversion()->getThisRank();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::deleteBuffers();

  const auto numberCellsFromMacroscopicSolver = (unsigned int)macroscopicCellsFromMacroscopicSolver.size();
  for (unsigned int i = 0; i < dataExchanges.size(); ++i) {
    if (nullptr == dataExchanges[i])
      continue;
    const coupling::IndexConversion<dim>* indexConversion = dataExchanges[i]->getIndexConversion();
    // fill the reduce buffers (expands the reduce buffer)
    writeToReduceBuffer(*indexConversion, *dataExchanges[i], sumMacroscopicCellsFromMamico);
    // allocate the reduce buffers (additional)
    allocateReduceBufferForReceiving(*indexConversion, *dataExchanges[i], globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  }

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::allocateReduceRequests(rank);

  // trigger MPI reduce
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::triggerReduce(rank);

  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::waitAllCollectiveOperations();

  for (unsigned int i = 0; i < dataExchanges.size(); ++i) {
    if (nullptr == dataExchanges[i])
      continue;
    readFromReduceBuffer(*dataExchanges[i], macroscopicCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  }
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::writeToReduceBuffer(const coupling::IndexConversion<dim>& indexConversion,
                                                                                 coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                                 const std::vector<MacroscopicCell*>& macroscopicCells) {
  const tarch::la::Vector<3, unsigned int> start(1);
  const tarch::la::Vector<3, unsigned int> end = start + coupling::initRange<dim>(indexConversion.getLocalNumberMacroscopicCells());
  tarch::la::Vector<3, unsigned int> loop(0);

#if (COMM_DEBUG == COUPLING_MD_YES)
  throw std::runtime_error("Debugging communication is not implemented for collective MPI");
#endif

  for (loop[2] = start[2]; loop[2] < end[2]; loop[2]++) {
    for (loop[1] = start[1]; loop[1] < end[1]; loop[1]++) {
      for (loop[0] = start[0]; loop[0] < end[0]; loop[0]++) {
        // determine local linearised index and global vector index
        tarch::la::Vector<dim, unsigned int> globalVectorIndex = coupling::initDimVector<dim>(loop);
        const unsigned int localIndex = indexConversion.getLocalCellIndex(globalVectorIndex);
        globalVectorIndex = indexConversion.convertLocalToGlobalVectorCellIndex(globalVectorIndex);
        coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::writeToReduceBuffer(indexConversion, dataExchange, *macroscopicCells[localIndex],
                                                                                         globalVectorIndex);
      }
    }
  }
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::allocateReduceBufferForReceiving(const coupling::IndexConversion<dim>& indexConversion,
                                                                                              coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                                              const unsigned int* const globalCellIndices,
                                                                                              unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::allocateReduceBufferForReceiving(indexConversion, dataExchange, globalVectorIndex);
  }
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::readFromReduceBuffer(coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                                  const std::vector<MacroscopicCell*>& macroscopicCells,
                                                                                  const unsigned int* const globalCellIndices) {

#if (COMM_DEBUG == COUPLING_MD_YES)
  throw std::runtime_error("Debugging communication is not implemented for collective MPI");
#endif

  const auto numberCells = (unsigned int)macroscopicCells.size();
  const coupling::IndexConversion<dim>* indexConversion = dataExchange.getIndexConversion();
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = dataExchange.getIndexConversion()->getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::readFromReduceBuffer(*indexConversion, dataExchange, *macroscopicCells[i], globalVectorIndex);
  }
}

#pragma endregion // collective operations

#pragma region sequential operations

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::sendFromMD2Macro(const coupling::IndexConversion<dim>& indexConversion,
                                                                              coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
                                                                              const std::vector<MacroscopicCell*>& macroscopicCellsFromMamico,
                                                                              const std::vector<MacroscopicCell*>& macroscopicCellsFromMacroscopicSolver,
                                                                              const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  sendFromMD2MacroNonBlocking(indexConversion, dataExchange, macroscopicCellsFromMamico, macroscopicCellsFromMacroscopicSolver,
                              globalCellIndicesFromMacroscopicSolver);
  wait4SendFromMD2Macro(indexConversion, dataExchange, macroscopicCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::sendFromMD2MacroNonBlocking(
    const coupling::IndexConversion<dim>& indexConversion, coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
    const std::vector<MacroscopicCell*>& macroscopicCellsFromMamico, const std::vector<MacroscopicCell*>& macroscopicCellsFromMacroscopicSolver,
    const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  const unsigned int numberCellsFromMacroscopicSolver = (unsigned int)macroscopicCellsFromMacroscopicSolver.size();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(indexConversion, dataExchange, globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  // fill the send buffers
  writeToSendBuffer(indexConversion, dataExchange, macroscopicCellsFromMamico);

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::allocateRequests();

  // trigger MPI recv/send
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::triggerReceiving(dataExchange);
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::triggerSending(dataExchange);
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::allocateReceiveBuffers(const coupling::IndexConversion<dim>& indexConversion,
                                                                                    coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
                                                                                    const unsigned int* const globalCellIndices, unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);

    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::allocateReceiveBuffers(dataExchange, globalVectorIndex);
  }
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::writeToSendBuffer(const coupling::IndexConversion<dim>& indexConversion,
                                                                               coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
                                                                               const std::vector<MacroscopicCell*>& macroscopicCells) {
  const tarch::la::Vector<3, unsigned int> start(1);
  const tarch::la::Vector<3, unsigned int> end = start + coupling::initRange<dim>(indexConversion.getLocalNumberMacroscopicCells());
  tarch::la::Vector<3, unsigned int> loop(0);

#if (COMM_DEBUG == COUPLING_MD_YES)
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  std::ofstream file;
  file.open(std::string("comm.log") + std::to_string(rank), std::ofstream::out | std::ofstream::app);
  file << "MD2Macro"
       << " MPI rank " << rank << " send global cell indices: [";
  for (loop[2] = start[2]; loop[2] < end[2]; loop[2]++) {
    for (loop[1] = start[1]; loop[1] < end[1]; loop[1]++) {
      for (loop[0] = start[0]; loop[0] < end[0]; loop[0]++) {
        tarch::la::Vector<dim, unsigned int> globalVectorIndex = coupling::initDimVector<dim>(loop);
        globalVectorIndex = indexConversion.convertLocalToGlobalVectorCellIndex(globalVectorIndex);
        unsigned int globalScalarIndex = indexConversion.getGlobalCellIndex(globalVectorIndex);
        if (loop[0] > start[0] || loop[1] > start[1] || loop[2] > start[2])
          file << ", ";
        file << globalScalarIndex;
      }
    }
  }
  file << "]" << std::endl;
  file.flush();
  file.close();
#endif

  for (loop[2] = start[2]; loop[2] < end[2]; loop[2]++) {
    for (loop[1] = start[1]; loop[1] < end[1]; loop[1]++) {
      for (loop[0] = start[0]; loop[0] < end[0]; loop[0]++) {
        // determine local linearised index and global vector index
        tarch::la::Vector<dim, unsigned int> globalVectorIndex = coupling::initDimVector<dim>(loop);
        const unsigned int localIndex = indexConversion.getLocalCellIndex(globalVectorIndex);
        globalVectorIndex = indexConversion.convertLocalToGlobalVectorCellIndex(globalVectorIndex);

        coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::writeToSendBuffer(dataExchange, *macroscopicCells[localIndex], globalVectorIndex);
      }
    }
  }
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::wait4SendFromMD2Macro(const coupling::IndexConversion<dim>& indexConversion,
                                                                                   coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
                                                                                   const std::vector<MacroscopicCell*>& macroscopicCellsFromMacroscopicSolver,
                                                                                   const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::waitAllOperations();

  // fill information from receive buffers into the macroscopic cells
  readFromReceiveBuffer(indexConversion, dataExchange, macroscopicCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class MacroscopicCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<MacroscopicCell, dim>::readFromReceiveBuffer(const coupling::IndexConversion<dim>& indexConversion,
                                                                                   coupling::sendrecv::DataExchange<MacroscopicCell, dim>& dataExchange,
                                                                                   const std::vector<MacroscopicCell*>& macroscopicCells,
                                                                                   const unsigned int* const globalCellIndices) {
  const unsigned int numberCells = (unsigned int)macroscopicCells.size();

#if (COMM_DEBUG == COUPLING_MD_YES)
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  std::ofstream file;
  file.open(std::string("comm.log") + std::to_string(rank), std::ofstream::out | std::ofstream::app);
  file << "Macro2MD"
       << " MPI rank " << rank << " recv global cell indices: [";
  for (unsigned int i = 0; i < numberCells; i++) {
    if (i > 0)
      file << ", ";
    file << globalCellIndices[i];
  }
  file << "]" << std::endl;
  file.flush();
  file.close();
#endif

  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell, dim>::readFromReceiveBuffer(dataExchange, *macroscopicCells[i], globalVectorIndex);
  }
}

#pragma endregion // sequential operations
