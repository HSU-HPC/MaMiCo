// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

#pragma region collective operations

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::reduceFromMD2Macro(std::vector<coupling::sendrecv::DataExchangeFromMD2Macro<dim>*>& dataExchanges,
                                                                             const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                             const unsigned int* const globalCellIndicesFromMacroscopicSolver,
                                                                             const std::vector<CouplingCell*>& sumCouplingCellsFromMamico) {
  const unsigned int rank = dataExchanges[0]->getIndexConversion()->getThisRank();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  const auto numberCellsFromMacroscopicSolver = (unsigned int)couplingCellsFromMacroscopicSolver.size();
  for (unsigned int i = 0; i < dataExchanges.size(); ++i) {
    if (nullptr == dataExchanges[i])
      continue;
    const coupling::IndexConversion<dim>* indexConversion = dataExchanges[i]->getIndexConversion();
    // fill the reduce buffers (expands the reduce buffer)
    writeToReduceBuffer(*indexConversion, *dataExchanges[i], sumCouplingCellsFromMamico);
    // allocate the reduce buffers (additional)
    allocateReduceBufferForReceiving(*indexConversion, *dataExchanges[i], globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  }

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReduceRequests(rank);

  // trigger MPI reduce
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerReduce(rank);

  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllCollectiveOperations();

  for (unsigned int i = 0; i < dataExchanges.size(); ++i) {
    if (nullptr == dataExchanges[i])
      continue;
    readFromReduceBuffer(*dataExchanges[i], couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  }
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::writeToReduceBuffer(const coupling::IndexConversion<dim>& indexConversion,
                                                                              coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                              const std::vector<CouplingCell*>& couplingCells) {
  const tarch::la::Vector<3, unsigned int> start(1);
  const tarch::la::Vector<3, unsigned int> end = start + coupling::initRange<dim>(indexConversion.getLocalNumberCouplingCells());
  tarch::la::Vector<3, unsigned int> loop(0);

  for (loop[2] = start[2]; loop[2] < end[2]; loop[2]++) {
    for (loop[1] = start[1]; loop[1] < end[1]; loop[1]++) {
      for (loop[0] = start[0]; loop[0] < end[0]; loop[0]++) {
        // determine local linearised index and global vector index
        tarch::la::Vector<dim, unsigned int> globalVectorIndex = coupling::initDimVector<dim>(loop);
        const unsigned int localIndex = indexConversion.getLocalCellIndex(globalVectorIndex);
        globalVectorIndex = indexConversion.convertLocalToGlobalVectorCellIndex(globalVectorIndex);
        coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToReduceBuffer(indexConversion, dataExchange, *couplingCells[localIndex],
                                                                                      globalVectorIndex);
      }
    }
  }
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::allocateReduceBufferForReceiving(const coupling::IndexConversion<dim>& indexConversion,
                                                                                           coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                                           const unsigned int* const globalCellIndices,
                                                                                           unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReduceBufferForReceiving(indexConversion, dataExchange, globalVectorIndex);
  }
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::readFromReduceBuffer(coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                               const std::vector<CouplingCell*>& couplingCells,
                                                                               const unsigned int* const globalCellIndices) {
  const auto numberCells = (unsigned int)couplingCells.size();
  const coupling::IndexConversion<dim>* indexConversion = dataExchange.getIndexConversion();
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = dataExchange.getIndexConversion()->getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromReduceBuffer(*indexConversion, dataExchange, *couplingCells[i], globalVectorIndex);
  }
}

#pragma endregion // collective operations

#pragma region sequential operations

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::sendFromMD2Macro(const coupling::IndexConversion<dim>& indexConversion,
                                                                           coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                           const std::vector<CouplingCell*>& couplingCellsFromMamico,
                                                                           const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                           const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  sendFromMD2MacroNonBlocking(indexConversion, dataExchange, couplingCellsFromMamico, couplingCellsFromMacroscopicSolver,
                              globalCellIndicesFromMacroscopicSolver);
  wait4SendFromMD2Macro(indexConversion, dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::sendFromMD2MacroNonBlocking(const coupling::IndexConversion<dim>& indexConversion,
                                                                                      coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                      const std::vector<CouplingCell*>& couplingCellsFromMamico,
                                                                                      const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                      const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  const unsigned int numberCellsFromMacroscopicSolver = (unsigned int)couplingCellsFromMacroscopicSolver.size();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(indexConversion, dataExchange, globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  // fill the send buffers
  writeToSendBuffer(indexConversion, dataExchange, couplingCellsFromMamico);

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateRequests();

  // trigger MPI recv/send
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerReceiving(dataExchange);
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerSending(dataExchange);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::allocateReceiveBuffers(const coupling::IndexConversion<dim>& indexConversion,
                                                                                 coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                 const unsigned int* const globalCellIndices, unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);

    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReceiveBuffers(dataExchange, globalVectorIndex);
  }
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::writeToSendBuffer(const coupling::IndexConversion<dim>& indexConversion,
                                                                            coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                            const std::vector<CouplingCell*>& couplingCells) {
  const tarch::la::Vector<3, unsigned int> start(1);
  const tarch::la::Vector<3, unsigned int> end = start + coupling::initRange<dim>(indexConversion.getLocalNumberCouplingCells());
  tarch::la::Vector<3, unsigned int> loop(0);

  for (loop[2] = start[2]; loop[2] < end[2]; loop[2]++) {
    for (loop[1] = start[1]; loop[1] < end[1]; loop[1]++) {
      for (loop[0] = start[0]; loop[0] < end[0]; loop[0]++) {
        // determine local linearised index and global vector index
        tarch::la::Vector<dim, unsigned int> globalVectorIndex = coupling::initDimVector<dim>(loop);
        const unsigned int localIndex = indexConversion.getLocalCellIndex(globalVectorIndex);
        globalVectorIndex = indexConversion.convertLocalToGlobalVectorCellIndex(globalVectorIndex);

        coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToSendBuffer(dataExchange, *couplingCells[localIndex], globalVectorIndex);
      }
    }
  }
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::wait4SendFromMD2Macro(const coupling::IndexConversion<dim>& indexConversion,
                                                                                coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                const unsigned int* const globalCellIndicesFromMacroscopicSolver) {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllOperations();

  // fill information from receive buffers into the coupling cells
  readFromReceiveBuffer(indexConversion, dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::readFromReceiveBuffer(const coupling::IndexConversion<dim>& indexConversion,
                                                                                coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                const std::vector<CouplingCell*>& couplingCells,
                                                                                const unsigned int* const globalCellIndices) {
  const unsigned int numberCells = (unsigned int)couplingCells.size();
  for (unsigned int i = 0; i < numberCells; i++) {
    const tarch::la::Vector<dim, unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromReceiveBuffer(dataExchange, *couplingCells[i], globalVectorIndex);
  }
}

#pragma endregion // sequential operations
