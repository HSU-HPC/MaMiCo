// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

#pragma region collective operations

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::reduceFromMD2Macro(std::vector<coupling::sendrecv::DataExchangeFromMD2Macro<dim>*>& dataExchanges,
                                                                             const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                             const I00* const globalCellIndicesFromMacroscopicSolver,
                                                                             const std::vector<CouplingCell*>& sumCouplingCellsFromMamico) {
  const unsigned int rank = IDXS.getRank();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  const auto numberCellsFromMacroscopicSolver = (unsigned int)couplingCellsFromMacroscopicSolver.size();
  for (unsigned int i = 0; i < dataExchanges.size(); ++i) {
    if (nullptr == dataExchanges[i])
      continue;
    // fill the reduce buffers (expands the reduce buffer)
    writeToReduceBuffer(*dataExchanges[i], sumCouplingCellsFromMamico);
    // allocate the reduce buffers (additional)
    allocateReduceBufferForReceiving(*dataExchanges[i], globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  }

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReduceRequests(rank);

  // trigger MPI reduce
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerReduce(rank);

  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllCollectiveOperations();

  for (unsigned int i = 0; i < dataExchanges.size(); ++i) {
    if (nullptr == dataExchanges[i])
      continue;
    readFromReduceBuffer(*dataExchanges[i], couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  }
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::writeToReduceBuffer(coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                              const std::vector<CouplingCell*>& couplingCells) {
  for (auto idx : I10())
#if (COUPLING_MD_ERROR == COUPLING_MD_YES)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToReduceBuffer(dataExchange, *couplingCells.at(idx.get()), idx);
#else
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToReduceBuffer(dataExchange, *couplingCells[idx.get()], idx);
#endif
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::allocateReduceBufferForReceiving(coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                                           const I00* const globalCellIndices, unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReduceBufferForReceiving(dataExchange, globalCellIndices[i]);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::readFromReduceBuffer(coupling::sendrecv::DataExchangeFromMD2Macro<dim>& dataExchange,
                                                                               const std::vector<CouplingCell*>& couplingCells,
                                                                               const I00* const globalCellIndices) {
  const auto numberCells = (unsigned int)couplingCells.size();
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromReduceBuffer(dataExchange, *couplingCells[i], globalCellIndices[i]);
}

#pragma endregion // collective operations

#pragma region sequential operations

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::sendFromMD2Macro(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                           const std::vector<CouplingCell*>& couplingCellsFromMamico,
                                                                           const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                           const I00* const globalCellIndicesFromMacroscopicSolver) {
  sendFromMD2MacroNonBlocking(dataExchange, couplingCellsFromMamico, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  wait4SendFromMD2Macro(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::sendFromMD2MacroNonBlocking(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                      const std::vector<CouplingCell*>& couplingCellsFromMamico,
                                                                                      const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                      const I00* const globalCellIndicesFromMacroscopicSolver) {
  const unsigned int numberCellsFromMacroscopicSolver = (unsigned int)couplingCellsFromMacroscopicSolver.size();

  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(dataExchange, globalCellIndicesFromMacroscopicSolver, numberCellsFromMacroscopicSolver);
  // fill the send buffers
  writeToSendBuffer(dataExchange, couplingCellsFromMamico);

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateRequests();

  // trigger MPI recv/send
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerReceiving(dataExchange);
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerSending(dataExchange);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::allocateReceiveBuffers(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                 const I00* const globalCellIndices, unsigned int numberCells) {
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReceiveBuffers(dataExchange, globalCellIndices[i]);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::writeToSendBuffer(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                            const std::vector<CouplingCell*>& couplingCells) {
  for (auto idx : I10())
#if (COUPLING_MD_ERROR == COUPLING_MD_YES)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToSendBuffer(dataExchange, *couplingCells.at(idx.get()), idx);
#else
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToSendBuffer(dataExchange, *couplingCells[idx.get()], idx);
#endif
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::wait4SendFromMD2Macro(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                const I00* const globalCellIndicesFromMacroscopicSolver) {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllOperations();

  // fill information from receive buffers into the coupling cells
  readFromReceiveBuffer(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMD2Macro<CouplingCell, dim>::readFromReceiveBuffer(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                const std::vector<CouplingCell*>& couplingCells,
                                                                                const I00* const globalCellIndices) {
  const unsigned int numberCells = (unsigned int)couplingCells.size();
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromReceiveBuffer(dataExchange, *couplingCells[i], globalCellIndices[i]);
}

#pragma endregion // sequential operations
