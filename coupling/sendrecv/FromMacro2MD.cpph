// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

#pragma region sequential operations

template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::sendFromMacro2MD(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange, const Local_Container_T& dst,
                                                                     const Container_T& src) {
  // send data
  sendFromMacro2MDNonBlocking(dataExchange, src);
  // wait for MPI calls to be finished and fill coupling cells from Mamico
  wait4SendFromMacro2MD(dataExchange, dst);
}

template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::sendFromMacro2MDNonBlocking(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange,
                                                                                const Container_T& cells) {
  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(dataExchange);
  // fill the send buffers
  writeToSendBuffer(dataExchange, cells);

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::allocateRequests();

  // trigger MPI calls for send/recv
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::triggerReceiving(dataExchange);
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::triggerSending(dataExchange);
}

template <class Cell_T, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::allocateReceiveBuffers(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange) {
  for (auto idx : I02())
    coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::allocateReceiveBuffers(dataExchange, idx);
}

template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::writeToSendBuffer(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange, const Container_T& cells) {
#if (COMM_DEBUG == COUPLING_MD_YES)
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  std::ofstream file;
  file.open(std::string("comm.log") + std::to_string(rank), std::ofstream::out | std::ofstream::app);
  file << "Macro2MD"
       << " MPI rank " << rank << " send global cell indices: [";
  I00 idx;
  coupling::datastructures::CouplingCell<dim>* cell;
  int i = 0;
  for (auto pair : cells) {
    std::tie(cell, idx) = pair;
    if (i++ > 0)
      file << ", ";
    file << idx;
  }
  file << "]" << std::endl;
  file.flush();
  file.close();
#endif
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::writeToSendBuffer(dataExchange, cells);
}

template <class Cell_T, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::wait4SendFromMacro2MD(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange,
                                                                          const Local_Container_T& cells) {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::waitAllOperations();

  // fill information from receive buffers into the coupling cells
  readFromReceiveBuffer(dataExchange, cells);
}

template <class Cell_T, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::readFromReceiveBuffer(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange,
                                                                          const Local_Container_T& cells) {
#if (COMM_DEBUG == COUPLING_MD_YES)
  int rank;
  MPI_Comm_rank(MPI_COMM_WORLD, &rank);
  std::ofstream file;
  file.open(std::string("comm.log") + std::to_string(rank), std::ofstream::out | std::ofstream::app);
  file << "Macro2MD"
       << " MPI rank " << rank << " recv global cell indices: [";
  I00 idx;
  coupling::datastructures::CouplingCell<dim>* cell;
  int i = 0;
  for (auto pair : cells) {
    std::tie(cell, idx) = pair;
    if (i++ > 0)
      file << ", ";
    file << idx;
  }
  file << "]" << std::endl;
  file.flush();
  file.close();
#endif
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::readFromReceiveBuffer(dataExchange, cells);
}

#pragma endregion // sequential operations

#pragma region collective operations
template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::bcastFromMacro2MD(
    std::vector<coupling::sendrecv::DataExchangeFromMacro2MD<dim>*>& dataExchangeFromCouplingCellServices, const Container_T& src,
    std::vector<Local_Container_T> dst) {
  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::deleteBuffers();

  const unsigned int rank = IDXS.getRank();

  for (auto& de : dataExchangeFromCouplingCellServices) {
    if (nullptr == de)
      continue;
    // TODO compute target ranks here and pass them in
    writeToSendBufferCollective(*de, src);
    allocateReceiveBuffersCollective(*de);
  }

  SendReceiveBuffer<Cell_T, dim>::allocateBcastRequests(rank);

  // SendReceiveBuffer<Cell_T,dim >::triggerReceivingCollective(dataExchange);
  SendReceiveBuffer<Cell_T, dim>::triggerBcasts(rank);

  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::waitAllCollectiveOperations();

  for (unsigned int i = 0; i < dataExchangeFromCouplingCellServices.size(); ++i) {
    if (dst[i].empty())
      continue;
    if (nullptr == dataExchangeFromCouplingCellServices[i])
      continue;
    readFromCollectiveBuffer(*dataExchangeFromCouplingCellServices[i], dst[i]);
  }
}

template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::writeToSendBufferCollective(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange,
                                                                                const Container_T& cells) {
#if (COMM_DEBUG == COUPLING_MD_YES)
  throw std::runtime_error("Debugging communication is not implemented for collective MPI");
#endif
  I01 idx;
  Cell_T* cell;
  for (auto pair : cells) {
    std::tie(cell, idx) = pair;
    coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::writeToBcastBuffer(dataExchange, cell, idx);
  }
}

template <class Cell_T, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::allocateReceiveBuffersCollective(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange) {
  for (auto idx : I02())
    coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::allocateBcastBufferForReceiving(dataExchange, idx);
}

template <class Cell_T, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<Cell_T, dim>::readFromCollectiveBuffer(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange,
                                                                             const Local_Container_T& cells) {
#if (COMM_DEBUG == COUPLING_MD_YES)
  throw std::runtime_error("Debugging communication is not implemented for collective MPI");
#endif
  I01 idx;
  Cell_T* cell;
  for (auto pair : cells) {
    std::tie(cell, idx) = pair;
    coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::readFromCollectiveBuffer(dataExchange, *cell, idx);
  }
}

#pragma endregion // collective operations
