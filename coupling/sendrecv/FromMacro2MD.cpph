// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

#pragma region sequential operations

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::sendFromMacro2MD(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                           const std::vector<CouplingCell*>& couplingCellsFromMamico,
                                                                           const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                           const I00* const globalCellIndicesFromMacroscopicSolver) {
  // send data
  sendFromMacro2MDNonBlocking(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  // wait for MPI calls to be finished and fill coupling cells from Mamico
  wait4SendFromMacro2MD(dataExchange, couplingCellsFromMamico);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::sendFromMacro2MDNonBlocking(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                      const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                      const I00* const globalCellIndicesFromMacroscopicSolver) {
  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(dataExchange);
  // fill the send buffers
  writeToSendBuffer(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateRequests();

  // trigger MPI calls for send/recv
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerReceiving(dataExchange);
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerSending(dataExchange);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::allocateReceiveBuffers(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange) {
  for (auto idx : I02())
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateReceiveBuffers(dataExchange, idx);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::writeToSendBuffer(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                            const std::vector<CouplingCell*>& couplingCells,
                                                                            const I00* const globalCellIndices) {
  const unsigned int numberCells = (unsigned int)couplingCells.size();
  for (unsigned int i = 0; i < numberCells; i++) 
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToSendBuffer(dataExchange, *couplingCells[i], globalCellIndices[i]);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::wait4SendFromMacro2MD(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                const std::vector<CouplingCell*>& couplingCellsFromMamico) {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllOperations();

  // fill information from receive buffers into the coupling cells
  readFromReceiveBuffer(dataExchange, couplingCellsFromMamico);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::readFromReceiveBuffer(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                const std::vector<CouplingCell*>& couplingCells) {
  for (auto idx : I10()) {
#if (COUPLING_MD_ERROR == COUPLING_MD_YES)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromReceiveBuffer(dataExchange, *couplingCells.at(idx.get()), idx);
#else
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromReceiveBuffer(dataExchange, *couplingCells[idx.get()], idx);
#endif
  }
}

#pragma endregion // sequential operations

#pragma region collective operations
template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::bcastFromMacro2MD(
    std::vector<coupling::sendrecv::DataExchangeFromMacro2MD<dim>*>& dataExchangeFromCouplingCellServices,
    const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver, const I00* const globalCellIndicesFromMacroscopicSolver,
    std::vector<std::vector<CouplingCell*>> couplingCellsFromMamico) {
  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  const unsigned int rank = IDXS.getRank();

  for (auto& de : dataExchangeFromCouplingCellServices) {
    if (nullptr == de)
      continue;
    // TODO compute target ranks here and pass them in
    writeToSendBufferCollective(*de, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
    allocateReceiveBuffersCollective(*de);
  }

  SendReceiveBuffer<CouplingCell, dim>::allocateBcastRequests(rank);

  // SendReceiveBuffer<CouplingCell,dim >::triggerReceivingCollective(dataExchange);
  SendReceiveBuffer<CouplingCell, dim>::triggerBcasts(rank);

  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllCollectiveOperations();

  for (unsigned int i = 0; i < dataExchangeFromCouplingCellServices.size(); ++i) {
    if (couplingCellsFromMamico[i].empty())
      continue;
    if (nullptr == dataExchangeFromCouplingCellServices[i])
      continue;
    readFromCollectiveBuffer(*dataExchangeFromCouplingCellServices[i], couplingCellsFromMamico[i]);
  }
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::writeToSendBufferCollective(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                      const std::vector<CouplingCell*>& couplingCells,
                                                                                      const I00* const globalCellIndices) {
  const auto numberCells = (unsigned int)couplingCells.size();
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToBcastBuffer(dataExchange, *couplingCells[i], globalCellIndices[i]);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::allocateReceiveBuffersCollective(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange) {
  for (auto idx : I10())
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateBcastBufferForReceiving(dataExchange, idx);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MD<CouplingCell, dim>::readFromCollectiveBuffer(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                   const std::vector<CouplingCell*>& couplingCells) {
  for (auto idx : I10())
#if (COUPLING_MD_ERROR == COUPLING_MD_YES)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromCollectiveBuffer(dataExchange, *couplingCells.at(idx.get()), idx);
#else
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::readFromCollectiveBuffer(dataExchange, *couplingCells[idx.get()], idx);
#endif
}

#pragma endregion // collective operations
