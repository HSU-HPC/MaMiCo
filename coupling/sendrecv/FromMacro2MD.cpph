// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico


template<class MacroscopicCell,unsigned int dim>
void coupling::sendrecv::FromMacro2MD<MacroscopicCell,dim>::writeToSendBuffer(
  const coupling::IndexConversion<dim>& indexConversion,
  coupling::sendrecv::DataExchange<MacroscopicCell,dim> &dataExchange,
  const std::vector<MacroscopicCell *> &macroscopicCells,
  const unsigned int * const globalCellIndices
){
  const unsigned int numberCells = (unsigned int) macroscopicCells.size();
  for (unsigned int i = 0; i < numberCells; i++){
    const tarch::la::Vector<dim,unsigned int> globalVectorIndex = indexConversion.getGlobalVectorCellIndex(globalCellIndices[i]);
    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::writeToSendBuffer(
      indexConversion,dataExchange,*macroscopicCells[i],globalVectorIndex
    );
  }
}



template<class MacroscopicCell,unsigned int dim>
void coupling::sendrecv::FromMacro2MD<MacroscopicCell,dim>::allocateReceiveBuffers(
  const coupling::IndexConversion<dim> &indexConversion,
  coupling::sendrecv::DataExchange<MacroscopicCell,dim> &dataExchange
){
  // start and end coordinates of local domain in coupling tool (including ghost layers <-> + Vector<...>(2) )
  const tarch::la::Vector<3,unsigned int> start(0);
  const tarch::la::Vector<3,unsigned int> end = start
                                              + coupling::initRange<dim>(indexConversion.getLocalNumberMacroscopicCells()+tarch::la::Vector<dim,unsigned int>(2));
  tarch::la::Vector<3,unsigned int> loop(0);

  for (loop[2]=start[2]; loop[2] < end[2]; loop[2]++){
  for (loop[1]=start[1]; loop[1] < end[1]; loop[1]++){
  for (loop[0]=start[0]; loop[0] < end[0]; loop[0]++){
    // determine global vector cell index of this cell
    tarch::la::Vector<dim,unsigned int> globalVectorIndex = coupling::initDimVector<dim>(loop);
    globalVectorIndex = indexConversion.convertLocalToGlobalVectorCellIndex(globalVectorIndex);

    // call allocateReceiveBuffers for this cell
    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::allocateReceiveBuffers(
      indexConversion,dataExchange,globalVectorIndex
    );
  }
  }
  }
}



template<class MacroscopicCell,unsigned int dim>
void coupling::sendrecv::FromMacro2MD<MacroscopicCell,dim>::readFromReceiveBuffer(
  const coupling::IndexConversion<dim> &indexConversion,
  coupling::sendrecv::DataExchange<MacroscopicCell,dim> &dataExchange,
  const std::vector<MacroscopicCell *> &macroscopicCells
){
  // start and end coordinates of local domain in coupling tool (including ghost layers <-> + Vector<...>(2) )
  const tarch::la::Vector<3,unsigned int> start(0);
  const tarch::la::Vector<3,unsigned int> end = start
                                              + coupling::initRange<dim>(indexConversion.getLocalNumberMacroscopicCells()+tarch::la::Vector<dim,unsigned int>(2));
  tarch::la::Vector<3,unsigned int> loop(0);

  for (loop[2]=start[2]; loop[2] < end[2]; loop[2]++){
  for (loop[1]=start[1]; loop[1] < end[1]; loop[1]++){
  for (loop[0]=start[0]; loop[0] < end[0]; loop[0]++){
    // determine global vector cell index of this cell and local linearised cell index
    tarch::la::Vector<dim,unsigned int> globalVectorIndex = coupling::initDimVector<dim>(loop);
    const unsigned int localIndex = indexConversion.getLocalCellIndex(globalVectorIndex);
    globalVectorIndex = indexConversion.convertLocalToGlobalVectorCellIndex(globalVectorIndex);

    // call readFromReceiveBuffer for this cell
    coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::readFromReceiveBuffer(
      indexConversion,dataExchange, *macroscopicCells[localIndex], globalVectorIndex
    );
  }
  }
  }
}


template<class MacroscopicCell,unsigned int dim>
void coupling::sendrecv::FromMacro2MD<MacroscopicCell,dim>::sendFromMacro2MD(
  const coupling::IndexConversion<dim> &indexConversion,
  coupling::sendrecv::DataExchange<MacroscopicCell,dim> &dataExchange,
  const std::vector<MacroscopicCell*> &macroscopicCellsFromMamico,
  const std::vector<MacroscopicCell*> &macroscopicCellsFromMacroscopicSolver,
  const unsigned int * const globalCellIndicesFromMacroscopicSolver
){
  // send data
  sendFromMacro2MDNonBlocking(indexConversion,dataExchange,macroscopicCellsFromMacroscopicSolver,globalCellIndicesFromMacroscopicSolver);
  // wait for MPI calls to be finished and fill macroscopic cells from Mamico
  wait4SendFromMacro2MD(indexConversion,dataExchange,macroscopicCellsFromMamico);
}



template<class MacroscopicCell,unsigned int dim>
void coupling::sendrecv::FromMacro2MD<MacroscopicCell,dim>::sendFromMacro2MDNonBlocking(
  const coupling::IndexConversion<dim> &indexConversion,
  coupling::sendrecv::DataExchange<MacroscopicCell,dim> &dataExchange,
  const std::vector<MacroscopicCell*> &macroscopicCellsFromMacroscopicSolver,
  const unsigned int * const globalCellIndicesFromMacroscopicSolver
){
  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  allocateReceiveBuffers(indexConversion,dataExchange);
  // fill the send buffers
  writeToSendBuffer(
    indexConversion,dataExchange,
    macroscopicCellsFromMacroscopicSolver,globalCellIndicesFromMacroscopicSolver
  );

  // allocate all requests -> needs to be called AFTER all buffers are filled
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::allocateRequests(indexConversion);

  // trigger MPI calls for send/recv
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::triggerReceiving(indexConversion,dataExchange);
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::triggerSending(indexConversion,dataExchange);
}



template<class MacroscopicCell,unsigned int dim>
void coupling::sendrecv::FromMacro2MD<MacroscopicCell,dim>::wait4SendFromMacro2MD(
  const coupling::IndexConversion<dim> &indexConversion,
  coupling::sendrecv::DataExchange<MacroscopicCell,dim> &dataExchange,
  const std::vector<MacroscopicCell*> &macroscopicCellsFromMamico
){
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<MacroscopicCell,dim>::waitAllOperations(indexConversion);

  // fill information from receive buffers into the macroscopic cells
  readFromReceiveBuffer(indexConversion,dataExchange,macroscopicCellsFromMamico);
}
