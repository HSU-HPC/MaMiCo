// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MDSendOnly<CouplingCell, dim>::writeToSendBuffer(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                    const std::vector<CouplingCell*>& couplingCells,
                                                                                    const I00* const globalCellIndices) {
  const unsigned int numberCells = (unsigned int)couplingCells.size();
  for (unsigned int i = 0; i < numberCells; i++)
    coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::writeToSendBuffer(dataExchange, *couplingCells[i], globalCellIndices[i]);
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MDSendOnly<CouplingCell, dim>::sendFromMacro2MD(coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange,
                                                                                   const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
                                                                                   const I00* const globalCellIndicesFromMacroscopicSolver) {
  sendFromMacro2MDNonBlocking(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);
  wait4SendFromMacro2MD();
}

template <class CouplingCell, unsigned int dim>
void coupling::sendrecv::FromMacro2MDSendOnly<CouplingCell, dim>::sendFromMacro2MDNonBlocking(
    coupling::sendrecv::DataExchange<CouplingCell, dim>& dataExchange, const std::vector<CouplingCell*>& couplingCellsFromMacroscopicSolver,
    const I00* const globalCellIndicesFromMacroscopicSolver) {
  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::deleteBuffers();

  // allocate the receive buffers and trigger the MPI-recv
  // allocateReceiveBuffers(dataExchange); // -> not existent

  // fill the send buffers and trigger the MPI-send
  writeToSendBuffer(dataExchange, couplingCellsFromMacroscopicSolver, globalCellIndicesFromMacroscopicSolver);

  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::allocateRequests();

  // coupling::sendrecv::SendReceiveBuffer<CouplingCell,dim>::triggerReceiving(dataExchange); // not required since no data are received
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::triggerSending(dataExchange);
}

template <class CouplingCell, unsigned int dim> void coupling::sendrecv::FromMacro2MDSendOnly<CouplingCell, dim>::wait4SendFromMacro2MD() {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<CouplingCell, dim>::waitAllOperations();
  // fill information from receive buffers into the coupling cells -> not required
  // readFromReceiveBuffer(dataExchange,couplingCellsFromMamico);
}
