// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MDSendOnly<Cell_T, dim>::writeToSendBuffer(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange,
                                                                                    const Container_T& cells) {
  I01 idx;
  Cell_T* cell;
  for(auto pair : cells) {
    std::tie(cell, idx) = pair;
    coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::writeToSendBuffer(dataExchange, *cell, idx);
  }
}

template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MDSendOnly<Cell_T, dim>::sendFromMacro2MD(coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange,
                                                                                   const Container_T& cells) {
  sendFromMacro2MDNonBlocking(dataExchange, cells);
  wait4SendFromMacro2MD();
}

template <class Cell_T, unsigned int dim>
template <class Container_T>
void coupling::sendrecv::FromMacro2MDSendOnly<Cell_T, dim>::sendFromMacro2MDNonBlocking(
    coupling::sendrecv::DataExchange<Cell_T, dim>& dataExchange, const Container_T& cells) {
  // empty send and receive buffers
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::deleteBuffers();

  // fill the send buffers and trigger the MPI-send
  writeToSendBuffer(dataExchange, cells);

  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::allocateRequests();
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::triggerSending(dataExchange);
}

template <class Cell_T, unsigned int dim> void coupling::sendrecv::FromMacro2MDSendOnly<Cell_T, dim>::wait4SendFromMacro2MD() {
  // wait for all send- and receive operations to complete
  coupling::sendrecv::SendReceiveBuffer<Cell_T, dim>::waitAllOperations();
}
