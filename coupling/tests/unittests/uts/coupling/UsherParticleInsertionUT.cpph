#pragma once

#include "coupling/UsherParticleInsertion.h"
#include "coupling/tests/unittests/UnitTestInterface.h"
#include "coupling/tests/unittests/MockService.cpph"
#include "coupling/tests/unittests/UnitTestingService.h"

#include "tarch/configuration/ParseConfiguration.h"
#include "coupling/configurations/MaMiCoConfiguration.h"
#include "coupling/configurations/BoundaryForceConfiguration.h"


//TODO: move these to namespace? -> general overhaul of namespacing??
//Location of the .xml used to construct our (universal) boundary force controller.
inline const std::string USHER_UT_BOUNDARY_FORCE_CONFIG = "boundary-force-controller.xml";

//Arbitrary temperature and veclocityvalue to give during testing of insertDeleteMass. i
//This should not matter for our testing purposes, as we won't run any further steps after inserting.
inline const double USHER_UT_INSERTION_TEMPERATURE = 0.0;
template<unsigned int dim>
inline const tarch::la::Vector<dim,double> USHER_UT_INSERTION_VELOCITY = tarch::la::Vector<dim,double>(0.0);

//Location of the LinkedCells from MDSolverInterface we use to construct our dummy MacroCells. TODO: proper comment
//Used in MDSolverInterface::getLinkedCell
template<unsigned int dim>
inline const tarch::la::Vector<dim, unsigned int> USHER_UT_LINKEDCELL_INDEX_FROM_MACROCELLS = tarch::la::Vector<dim,unsigned int>(0);

//Location of where to insert LinkedCells from MDSolverInterface into our dummy MacroCells. TODO: proper comment
//Used in MacroscopicCellWithLinkedCells::addLinkedCell
inline const unsigned int USHER_UT_LINKEDCELL_INDEX_TO_MACROCELLS = 0;

namespace coupling {
	template<class LinkedCell, unsigned int dim>
	class UsherParticleInsertionUT;
}


//note: this has only been tested with LinkedCell=MY_LINKEDCELL and dim=3
template<class LinkedCell,unsigned int dim>
class coupling::UsherParticleInsertionUT : public testing::ut::UnitTestImpl<coupling::UsherParticleInsertion<LinkedCell,dim>> {
	public:

		//Used when testing Usher's most important function: insertDeleteMass
		struct insertDeleteParametrisation {

			//all of these cells are going to be inserted, one by one...
			std::vector<coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim>> macroCellsWithLinkedCells;

			//...while all of the following are constant per testing instance.
			//const tarch::la::Vector<dim,double>& macroscopicCellPosition; TODO
			const tarch::la::Vector<dim,double>& macroscopicCellSize;
			const tarch::la::Vector<dim,double>& meanVelocity;
			const double& temperature;
			const coupling::BoundaryForceController<LinkedCell,dim>* boundaryForceController;
		};
		
		UsherParticleInsertionUT(testing::ut::UnitTestingService *uts):
		testing::ut::UnitTestImpl<coupling::UsherParticleInsertion<LinkedCell,dim>>(uts->getRank(), uts->getCommSize())
		{
			//Get mamico config that is later used to construct boundary force controllers
			coupling::configurations::MaMiCoConfiguration<dim> mamicoConfig;
			tarch::configuration::ParseConfiguration::parseConfiguration<coupling::configurations::MaMiCoConfiguration<dim> >(USHER_UT_BOUNDARY_FORCE_CONFIG,"mamico",mamicoConfig);
    		if (!mamicoConfig.isValid()){std::cout << "ERROR UnitTesting: Invalid Mamico config (for BoundaryForceController in Usher UT) in: " << USHER_UT_BOUNDARY_FORCE_CONFIG << std::endl; exit(EXIT_FAILURE);}

			//Get MacroscopicCell size from mamico config TODO
			tarch::la::Vector<dim,double> macroscopicCellSize(0.0);
			//Get MacroscopicCell block size from mamico config TODO
			tarch::la::Vector<dim,unsigned int> blockSize(0);
			//Get number of LinkedCells per MacroscopicCell from mamico config TODO
			tarch::la::Vector<dim,unsigned int> linkedCellsPerMacroscopicCell(2);
			
			//Generate vector containing mocks of coupling::UsherParticleInsertion<LinkedCell,dim>
			//Also generate insertDeleteParametrisation for each mock. TODO: proper comment
			std::vector<coupling::UsherParticleInsertion<LinkedCell,dim> *> this_mocks;
			for(unsigned int i = 0; i < uts->getMDInterfaces().size() /* == uts->getIndexConversions.size()*/; i++) {
				auto mdInterface = uts->getMDInterfaces()[i];
				auto indexConversion = uts->getIndexConversions()[i];

				//Get some linked cells from md interface. we always take the first (i.e 0..0) LinkedCell per macro cell TODO: proper comment
				std::vector<LinkedCell> linkedCellsFromMD = {};
				//We need to convert this to linear to iterate over all cells, independant of dim
				//Since each of the MD instances runs sequentially, local == global.
				unsigned int linearGlobalNumberMacroscopicCells = indexConversion->getGlobalCellIndex(indexConversion->getGlobalNumberMacroscopicCells());
				for(unsigned int cell_index = 0; cell_index < linearGlobalNumberMacroscopicCells; cell_index++)
					linkedCellsFromMD.push_back(mdInterface->getLinkedCell(
						indexConversion->getGlobalVectorCellIndex(cell_index),										//macroscopicCellIndex
						tarch::la::Vector<dim,unsigned int>(USHER_UT_LINKEDCELL_INDEX_FROM_MACROCELLS<dim>),		//linkedCellInMacroscopicCell
						linkedCellsPerMacroscopicCell,																//linkedCellsPerMacroscopicCell
						*indexConversion																			//indexConversion
					));

				//Construct MacroscopicCellWithLinkedCells for each of these LinkedCells
				std::vector<coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim>> macroCellsWithLinkedCells = {};
				for(auto linkedCell : linkedCellsFromMD) {
					//Construct new MacroscopicCellWithLinkedCells
					auto newMacroCell = coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim>(blockSize);
					newMacroCell.addLinkedCell(linkedCell, USHER_UT_LINKEDCELL_INDEX_TO_MACROCELLS);
					macroCellsWithLinkedCells.push_back(newMacroCell);
				}
				
				//Generate insertDeleteParametrisation struct
				_insertDeleteParametrisations.push_back({
					macroCellsWithLinkedCells,
					macroscopicCellSize,
					USHER_UT_INSERTION_VELOCITY<dim>,
					USHER_UT_INSERTION_TEMPERATURE,
					mamicoConfig.getBoundaryForceConfiguration().interpreteConfiguration(mdInterface)
				});


				//TODO: proper mocks for the first nine parameters
				this_mocks.push_back(new coupling::UsherParticleInsertion<LinkedCell,dim>(0,0,0,0,0,0,0,0,0,mdInterface));
			}

			//Create new MockService for coupling::UsherParticleInsertion<LinkedCell,dim> using mocks generated above:
			this->_mockService = uts->addMockService<coupling::UsherParticleInsertion<LinkedCell,dim>>(this_mocks);
			
			//Add test functions
			this->_testFuncs.push_back(std::make_tuple(new 
				std::function<void (coupling::UsherParticleInsertion<LinkedCell,dim>&)>
				{ [this] (coupling::UsherParticleInsertion<LinkedCell,dim>& mock) { testInsertDeleteMass(mock); } }, "insertDeleteMass"
			));
		}

		void testInsertDeleteMass(coupling::UsherParticleInsertion<LinkedCell,dim>& mock) {
			//TODO
		}

	private:
		//The nth entry in this vector corresponds to the nth MD Interface returned by uts->getMDInterfaces
		std::vector</*coupling::UsherParticleInsertionUT::*/insertDeleteParametrisation> _insertDeleteParametrisations;
};

