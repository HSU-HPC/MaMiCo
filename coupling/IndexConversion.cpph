// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template <unsigned int dim>
coupling::IndexConversion<dim>::IndexConversion(tarch::la::Vector<dim, unsigned int> globalNumberCouplingCells,
                                                tarch::la::Vector<dim, unsigned int> numberProcesses, unsigned int rank,
                                                tarch::la::Vector<dim, double> globalMDDomainSize, tarch::la::Vector<dim, double> globalMDDomainOffset,
                                                coupling::paralleltopology::ParallelTopologyType parallelTopologyType,
                                                unsigned int topologyOffset)
    : // DO NOT CHANGE ORDERING OF THESE PARAMETERS
      // parallel-topology and type need to be initialised first (independent of
      // other class-members in init.)
      _parallelTopologyType(parallelTopologyType),
      _parallelTopology(coupling::paralleltopology::ParallelTopologyFactory::getParallelTopology<dim>(parallelTopologyType, numberProcesses, topologyOffset)),
      // independent from other members in init.
      _numberProcesses(numberProcesses), _rank(rank),
      // depends on parallel-topology
      _thisProcess(getThisProcessCoordinates(rank)),
      // independent from other members in init.
      _globalNumberCouplingCells(globalNumberCouplingCells),
      // independent from other members in init.
      _averageLocalNumberCouplingCells(initAverageLocalNumberCouplingCells(globalNumberCouplingCells, numberProcesses)),
      // requires parallel-topology to be init.
      _localNumberCouplingCells(initLocalNumberCouplingCells(globalNumberCouplingCells, numberProcesses, rank)),
      // no dependen.
      _divisionFactor4GlobalNumberCouplingCells(coupling::initDivisionFactor<dim>(_globalNumberCouplingCells + tarch::la::Vector<dim, unsigned int>(2))),
      // no dependen.
      _divisionFactor4LocalNumberCouplingCells(coupling::initDivisionFactor<dim>(_localNumberCouplingCells + tarch::la::Vector<dim, unsigned int>(2))),
      // no dependen.
      _globalMDDomainSize(globalMDDomainSize), _globalMDDomainOffset(globalMDDomainOffset),
      _couplingCellSize(initCouplingCellSize(globalMDDomainSize, globalNumberCouplingCells)) {
  if (_parallelTopology == NULL) {
    std::cout << "ERROR IndexConversion::IndexConversion(): _parallelTopology==NULL!" << std::endl;
    exit(EXIT_FAILURE);
  }
}

template <unsigned int dim> coupling::IndexConversion<dim>::~IndexConversion<dim>() {
  if (_parallelTopology != NULL) {
    delete _parallelTopology;
    _parallelTopology = NULL;
  }
}

template <unsigned int dim> unsigned int coupling::IndexConversion<dim>::getGlobalCellIndex(tarch::la::Vector<dim, unsigned int> globalCellIndex) const {
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(globalCellIndex)) {
    std::cout << "ERROR IndexConversion::getGlobalCellIndex(...): Index " << globalCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif
  return getCellIndex(globalCellIndex, _globalNumberCouplingCells);
}

template <unsigned int dim> unsigned int coupling::IndexConversion<dim>::getLocalCellIndex(tarch::la::Vector<dim, unsigned int> localCellIndex) const {
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(localCellIndex)) {
    std::cout << "ERROR IndexConversion::getLocalCellIndex(): Index " << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif
  return getCellIndex(localCellIndex, _localNumberCouplingCells);
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getGlobalVectorCellIndex(unsigned int globalCellIndex) const {
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(coupling::getVectorCellIndex<dim>(globalCellIndex, _divisionFactor4GlobalNumberCouplingCells))) {
    std::cout << "ERROR IndexConversion::getGlobalVectorCellIndex(...): Index " << globalCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif
  return coupling::getVectorCellIndex<dim>(globalCellIndex, _divisionFactor4GlobalNumberCouplingCells);
}

// index of INT_MAX means "not within MD bounds"
template <unsigned int dim>
tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getGlobalInnerVectorCellIndex(unsigned int globalCellIndex) const {
  tarch::la::Vector<dim, unsigned int> globalVectorCellIndex = getGlobalVectorCellIndex(globalCellIndex);
  for (unsigned int d = 0; d < dim; d++) {
    // TODO: Sind das die richtigen Grenzen?
    if (globalVectorCellIndex[d] < 4 || globalVectorCellIndex[d] > _globalNumberCouplingCells[d] - 3)
      globalVectorCellIndex[d] = INT_MAX;
    else
      globalVectorCellIndex[d] -= 4;
  }
  return globalVectorCellIndex;
}

template <unsigned int dim>
tarch::la::Vector<dim, unsigned int>
coupling::IndexConversion<dim>::convertInnerVectorCellIndexToGlobal(tarch::la::Vector<dim, unsigned int> cellIndexVectorMDContext) const {
  tarch::la::Vector<dim, unsigned int> converted = cellIndexVectorMDContext;
  for (unsigned int d = 0; d < dim; d++)
    converted[d] += 2;
  return converted;
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getLocalVectorCellIndex(unsigned int localCellIndex) const {
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(coupling::getVectorCellIndex<dim>(localCellIndex, _divisionFactor4LocalNumberCouplingCells))) {
    std::cout << "ERROR IndexConversion::getLocalVectorCellIndex(...): Index " << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif
  return coupling::getVectorCellIndex<dim>(localCellIndex, _divisionFactor4LocalNumberCouplingCells);
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getProcessCoordinates(unsigned int rank) const {
  return _parallelTopology->getProcessCoordinates(rank);
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getThisProcessCoordinates(unsigned int rank) const {
  tarch::la::Vector<dim, unsigned int> processCoordinates = getProcessCoordinates(rank);
  for (unsigned int d = 0; d < dim; ++d) {
    processCoordinates[d] = processCoordinates[d] % _numberProcesses[d];
  }
  return processCoordinates;
}

template <unsigned int dim> unsigned int coupling::IndexConversion<dim>::getRank(tarch::la::Vector<dim, unsigned int> processCoordinates) const {
  return _parallelTopology->getRank(processCoordinates);
}

template <unsigned int dim>
tarch::la::Vector<dim, unsigned int>
coupling::IndexConversion<dim>::convertLocalToGlobalVectorCellIndex(tarch::la::Vector<dim, unsigned int> localCellIndex) const {
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(localCellIndex)) {
    std::cout << "ERROR IndexConversion::convertLocalToGlobalVectorCellIndex(...): "
                 "Index "
              << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif
  tarch::la::Vector<dim, unsigned int> globalCellIndex(0);
  for (unsigned int d = 0; d < dim; d++) {
    globalCellIndex[d] = localCellIndex[d] + _thisProcess[d] * _averageLocalNumberCouplingCells[d];
  }
  return globalCellIndex;
}

template <unsigned int dim>
tarch::la::Vector<dim, unsigned int>
coupling::IndexConversion<dim>::convertGlobalToLocalVectorCellIndex(tarch::la::Vector<dim, unsigned int> globalCellIndex) const {
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(globalCellIndex)) {
    std::cout << "ERROR IndexConversion::convertGlobalToLocalVectorCellIndex(...): "
                 "Index "
              << globalCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif
  tarch::la::Vector<dim, unsigned int> localCellIndex(0);
  for (unsigned int d = 0; d < dim; d++) {
    localCellIndex[d] = globalCellIndex[d] - _thisProcess[d] * _averageLocalNumberCouplingCells[d];
  }
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(localCellIndex)) {
    std::cout << "ERROR IndexConversion::convertGlobalToLocalVectorCellIndex(...): "
                 "Index "
              << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif
  return localCellIndex;
}

template <unsigned int dim> unsigned int coupling::IndexConversion<dim>::convertLocalToGlobalCellIndex(unsigned int localCellIndex) const {
  // convert linearised index to vector index
  tarch::la::Vector<dim, unsigned int> vec = getLocalVectorCellIndex(localCellIndex);
  // convert local to global vector index
  vec = convertLocalToGlobalVectorCellIndex(vec);
  // return linearised global index
  return getGlobalCellIndex(vec);
}

template <unsigned int dim> unsigned int coupling::IndexConversion<dim>::convertGlobalToLocalCellIndex(unsigned int globalCellIndex) const {
  // convert linearised index to vector index
  tarch::la::Vector<dim, unsigned int> vec = getGlobalVectorCellIndex(globalCellIndex);
  // convert local to global vector index
  vec = convertGlobalToLocalVectorCellIndex(vec);
  // return linearised global index
  return getLocalCellIndex(vec);
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getAverageLocalNumberCouplingCells() const {
  return _averageLocalNumberCouplingCells;
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getLocalNumberCouplingCells() const {
  return _localNumberCouplingCells;
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getGlobalNumberCouplingCells() const {
  return _globalNumberCouplingCells;
}

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getThisProcess() const { return _thisProcess; }

template <unsigned int dim> unsigned int coupling::IndexConversion<dim>::getThisRank() const { return _rank; }

template <unsigned int dim> tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getNumberProcesses() const { return _numberProcesses; }

template <unsigned int dim> tarch::la::Vector<dim, double> coupling::IndexConversion<dim>::getGlobalMDDomainSize() const { return _globalMDDomainSize; }

template <unsigned int dim> tarch::la::Vector<dim, double> coupling::IndexConversion<dim>::getGlobalMDDomainOffset() const { return _globalMDDomainOffset; }

template <unsigned int dim> tarch::la::Vector<dim, double> coupling::IndexConversion<dim>::getCouplingCellSize() const { return _couplingCellSize; }

template <unsigned int dim> coupling::paralleltopology::ParallelTopologyType coupling::IndexConversion<dim>::getParallelTopologyType() const {
  return _parallelTopologyType;
}

template <unsigned int dim>
tarch::la::Vector<dim, unsigned int> coupling::IndexConversion<dim>::getGlobalVectorCellIndex(tarch::la::Vector<dim, double> position) const {
  tarch::la::Vector<dim, unsigned int> globalIndex(0);
  for (unsigned int d = 0; d < dim; d++) {
    const double buf = position[d] - (_globalMDDomainOffset[d] - _couplingCellSize[d]);
    globalIndex[d] = (unsigned int)(buf / _couplingCellSize[d]);
  }

#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(globalIndex)) {
    std::cout << "ERROR IndexConversion::getGlobalVectorCellIndex(...): "
                 "Invalid conversion for position "
              << position << " to global vector cell index " << globalIndex << "!" << std::endl;
    exit(EXIT_FAILURE);
  }
#endif

  return globalIndex;
}

template <unsigned int dim> bool coupling::IndexConversion<dim>::isValidGlobalVectorCellIndex(tarch::la::Vector<dim, unsigned int> globalCellIndex) const {
  return isValidVectorCellIndex(globalCellIndex, _globalNumberCouplingCells);
}

template <unsigned int dim> bool coupling::IndexConversion<dim>::isValidLocalVectorCellIndex(tarch::la::Vector<dim, unsigned int> localCellIndex) const {
  return isValidVectorCellIndex(localCellIndex, _localNumberCouplingCells);
}

template <unsigned int dim> bool coupling::IndexConversion<dim>::isValidGlobalCellIndex(unsigned int globalIndex) const {
  unsigned int range = _globalNumberCouplingCells[0] + 2;
  for (unsigned int d = 1; d < dim; d++) {
    range = range * (_globalNumberCouplingCells[d] + 2);
  }
  return isValidCellIndex(globalIndex, range);
}

template <unsigned int dim> bool coupling::IndexConversion<dim>::isValidLocalCellIndex(unsigned int localIndex) const {
  unsigned int range = _localNumberCouplingCells[0] + 2;
  for (unsigned int d = 1; d < dim; d++) {
    range = range * (_localNumberCouplingCells[d] + 2);
  }
  return isValidCellIndex(localIndex, range);
}

template <unsigned int dim>
unsigned int coupling::IndexConversion<dim>::getCellIndex(tarch::la::Vector<dim, unsigned int> vectorCellIndex,
                                                          const tarch::la::Vector<dim, unsigned int>& numberCells) const {
  unsigned int index = vectorCellIndex[dim - 1];
  for (int d = dim - 2; d > -1; d--) {
    index = (numberCells[d] + 2) * index + vectorCellIndex[d];
  }
  return index;
}

template <unsigned int dim>
tarch::la::Vector<dim, unsigned int>
coupling::IndexConversion<dim>::initAverageLocalNumberCouplingCells(tarch::la::Vector<dim, unsigned int> globalNumberCouplingCells,
                                                                    tarch::la::Vector<dim, unsigned int> numberProcesses) const {
  tarch::la::Vector<dim, unsigned int> avg(0);
  for (unsigned int d = 0; d < dim; d++) {
    avg[d] = globalNumberCouplingCells[d] / numberProcesses[d];
  }
  return avg;
}

template <unsigned int dim>
tarch::la::Vector<dim, unsigned int>
coupling::IndexConversion<dim>::initLocalNumberCouplingCells(tarch::la::Vector<dim, unsigned int> globalNumberCouplingCells,
                                                             tarch::la::Vector<dim, unsigned int> numberProcesses, unsigned int rank) const {
  tarch::la::Vector<dim, unsigned int> local(0);
  const tarch::la::Vector<dim, unsigned int> avgNumberCells = initAverageLocalNumberCouplingCells(globalNumberCouplingCells, numberProcesses);
  const tarch::la::Vector<dim, unsigned int> thisProcess = getProcessCoordinates(rank);

  for (unsigned int d = 0; d < dim; d++) {
    // if this process is not the "last" one along one dimension, we use the
    // avg. number of cells...
    if (thisProcess[d] != numberProcesses[d] - 1) {
      local[d] = avgNumberCells[d];
      // ... otherwise (=last process), we fill up with the rest of the cells
    } else {
      local[d] = globalNumberCouplingCells[d] - thisProcess[d] * avgNumberCells[d];
    }
  }
  return local;
}

template <unsigned int dim>
bool coupling::IndexConversion<dim>::isValidVectorCellIndex(tarch::la::Vector<dim, unsigned int> index,
                                                            const tarch::la::Vector<dim, unsigned int>& range) const {
  bool valid = true;
  for (unsigned int d = 0; d < dim; d++) {
    valid = valid && (index[d] < range[d] + 2);
  }
  return valid;
}

template <unsigned int dim> bool coupling::IndexConversion<dim>::isValidCellIndex(unsigned int index, const unsigned int& range) const {
  return (index < range);
}

template <unsigned int dim>
tarch::la::Vector<dim, double>
coupling::IndexConversion<dim>::initCouplingCellSize(const tarch::la::Vector<dim, double>& globalMDDomainSize,
                                                     const tarch::la::Vector<dim, unsigned int>& globalNumberCouplingCells) const {
  tarch::la::Vector<dim, double> cellsize = globalMDDomainSize;
  for (unsigned int d = 0; d < dim; d++) {
    cellsize[d] = cellsize[d] / globalNumberCouplingCells[d];
  }
  return cellsize;
}

template <unsigned int dim>
unsigned int coupling::IndexConversion<dim>::getUniqueRankForCouplingCell(tarch::la::Vector<dim, unsigned int> globalCellIndex) const {
  tarch::la::Vector<dim, unsigned int> processCoords(0);
  for (unsigned int d = 0; d < dim; d++) {
    // special case: cell in first section
    if (globalCellIndex[d] < _averageLocalNumberCouplingCells[d] + 1) {
      processCoords[d] = 0;
      // special case: cell in last section
    } else if (globalCellIndex[d] > _averageLocalNumberCouplingCells[d] * (_numberProcesses[d] - 1)) {
      processCoords[d] = _numberProcesses[d] - 1;
      // all other cases
    } else {
      // remove ghost layer contribution from vector index (...-1)
      processCoords[d] = (globalCellIndex[d] - 1) / _averageLocalNumberCouplingCells[d];
    }
  }

  return getRank(processCoords);
}

template <unsigned int dim>
std::vector<unsigned int> coupling::IndexConversion<dim>::getRanksForCouplingCell(tarch::la::Vector<dim, unsigned int> globalCellIndex) const {
  std::vector<unsigned int> ranks;

  // start and end coordinates of neighboured cells.
  tarch::la::Vector<3, unsigned int> start(0);
  tarch::la::Vector<3, unsigned int> end(0);
  tarch::la::Vector<3, unsigned int> loopIndex(0);

  // determine up to 3^dim neighboured cells in the surrounding of
  // globalCellIndex;
  // reduce this number if globalCellIndex lies on the global boundary
  for (unsigned int d = 0; d < dim; d++) {
    if (globalCellIndex[d] > 0) {
      start[d] = globalCellIndex[d] - 1;
    }
    end[d] = _globalNumberCouplingCells[d] + 1;
    if (globalCellIndex[d] < end[d]) {
      end[d] = globalCellIndex[d] + 1;
    }
  }

  // loop over neighbouring regions
  for (loopIndex[2] = start[2]; loopIndex[2] <= end[2]; loopIndex[2]++) {
    for (loopIndex[1] = start[1]; loopIndex[1] <= end[1]; loopIndex[1]++) {
      for (loopIndex[0] = start[0]; loopIndex[0] <= end[0]; loopIndex[0]++) {

        // determine the global cell index of this particular grid cell
        tarch::la::Vector<dim, unsigned int> thisGlobalCellIndex(0);
        for (unsigned int d = 0; d < dim; d++) {
          thisGlobalCellIndex[d] = loopIndex[d];
        }

        // determine the unique rank for this cell
        const unsigned int rank = getUniqueRankForCouplingCell(thisGlobalCellIndex);

        // add this rank to the vector with all ranks if we did not add this one
        // before
        bool isContained = false;
        const unsigned int thisSize = (unsigned int)ranks.size();
        for (unsigned int i = 0; i < thisSize; i++) {
          if (ranks[i] == rank) {
            isContained = true;
            break;
          }
        }
        if (!isContained) {
          ranks.push_back(rank);
        }
      }
    }
  }

  return ranks;
}
