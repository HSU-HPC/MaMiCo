// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template<unsigned int dim>
coupling::IndexConversion<dim>::IndexConversion(
  tarch::la::Vector<dim,unsigned int> globalNumberMacroscopicCells,
  tarch::la::Vector<dim,unsigned int> numberProcesses,
  unsigned int rank,
  tarch::la::Vector<dim,double> globalMDDomainSize,
  tarch::la::Vector<dim,double> globalMDDomainOffset,
  coupling::paralleltopology::ParallelTopologyType parallelTopologyType,
  unsigned int topologyOffset
):
  // DO NOT CHANGE ORDERING OF THESE PARAMETERS
    // parallel-topology and type need to be initialised first (independent of other class-members in init.)
   _parallelTopologyType(parallelTopologyType),
   _parallelTopology(coupling::paralleltopology::ParallelTopologyFactory::getParallelTopology<dim>(parallelTopologyType,numberProcesses,topologyOffset)),
   // independent from other members in init.
   _numberProcesses(numberProcesses),
   _rank(rank),
   // depends on parallel-topology
   _thisProcess(getProcessCoordinates(rank)),
   // independent from other members in init.
   _globalNumberMacroscopicCells(globalNumberMacroscopicCells),
   // independent from other members in init.
   _averageLocalNumberMacroscopicCells(initAverageLocalNumberMacroscopicCells(globalNumberMacroscopicCells,numberProcesses)),
   // requires parallel-topology to be init.
   _localNumberMacroscopicCells(initLocalNumberMacroscopicCells(globalNumberMacroscopicCells,numberProcesses,rank)),
   // no dependen.
   _divisionFactor4GlobalNumberMacroscopicCells(
     coupling::initDivisionFactor<dim>(_globalNumberMacroscopicCells+tarch::la::Vector<dim,unsigned int>(2))),
   // no dependen.
   _divisionFactor4LocalNumberMacroscopicCells(
     coupling::initDivisionFactor<dim>(_localNumberMacroscopicCells+tarch::la::Vector<dim,unsigned int>(2))),
   // no dependen.
   _globalMDDomainSize(globalMDDomainSize),
   _globalMDDomainOffset(globalMDDomainOffset),
   _macroscopicCellSize(initMacroscopicCellSize(globalMDDomainSize,globalNumberMacroscopicCells)){
  if (_parallelTopology==NULL){std::cout << "ERROR IndexConversion::IndexConversion(): _parallelTopology==NULL!" << std::endl; exit(EXIT_FAILURE);}
}


template<unsigned int dim>
coupling::IndexConversion<dim>::~IndexConversion(){
  if (_parallelTopology != NULL){ delete _parallelTopology; _parallelTopology = NULL; }
}


template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::getGlobalCellIndex(
tarch::la::Vector<dim,unsigned int> globalCellIndex) const {
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(globalCellIndex)){
    std::cout << "ERROR IndexConversion::getGlobalCellIndex(...): Index " << globalCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif
  return getCellIndex(globalCellIndex,_globalNumberMacroscopicCells);
}



template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::getLocalCellIndex(
tarch::la::Vector<dim,unsigned int> localCellIndex) const {
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(localCellIndex) ){
    std::cout << "ERROR IndexConversion::getLocalCellIndex(): Index " << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif
  return getCellIndex(localCellIndex,_localNumberMacroscopicCells);
}

template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::getGlobalVectorCellIndex(
unsigned int globalCellIndex) const {
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(coupling::getVectorCellIndex<dim>(globalCellIndex,_divisionFactor4GlobalNumberMacroscopicCells)) ){
    std::cout << "ERROR IndexConversion::getGlobalVectorCellIndex(...): Index " << globalCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif
  return coupling::getVectorCellIndex<dim>(globalCellIndex,_divisionFactor4GlobalNumberMacroscopicCells);
}


//index of INT_MAX means "not within MD bounds"
template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::getGlobalInnerVectorCellIndex(
unsigned int globalCellIndex) const {
	tarch::la::Vector<dim, unsigned int> globalVectorCellIndex = getGlobalVectorCellIndex(globalCellIndex);
	for(unsigned int d = 0; d < dim; d++) {
		//TODO: Sind das die richtigen Grenzen?
		if(globalVectorCellIndex[d] < 3 || globalVectorCellIndex[d] > _globalNumberMacroscopicCells[d]-1) globalVectorCellIndex[d] = INT_MAX;
		else globalVectorCellIndex[d] -= 2;
	}
	return globalVectorCellIndex;
}

template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::convertInnerVectorCellIndexToGlobal(
tarch::la::Vector<dim,unsigned int> cellIndexVectorMDContext) const {
	tarch::la::Vector<dim,unsigned int> converted = cellIndexVectorMDContext;
	for(unsigned int d = 0; d < dim; d++) converted[d] += 2;
	return converted;
}

template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::getLocalVectorCellIndex(
unsigned int localCellIndex) const {
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(coupling::getVectorCellIndex<dim>(localCellIndex,_divisionFactor4LocalNumberMacroscopicCells)) ){
    std::cout << "ERROR IndexConversion::getLocalVectorCellIndex(...): Index " << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif
  return coupling::getVectorCellIndex<dim>(localCellIndex,_divisionFactor4LocalNumberMacroscopicCells);
}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::getProcessCoordinates(unsigned int rank) const {
  return _parallelTopology->getProcessCoordinates(rank);
}


template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::getRank(tarch::la::Vector<dim,unsigned int> processCoordinates) const {
  return _parallelTopology->getRank(processCoordinates);
}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::convertLocalToGlobalVectorCellIndex(
tarch::la::Vector<dim,unsigned int> localCellIndex) const {
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(localCellIndex)){
    std::cout << "ERROR IndexConversion::convertLocalToGlobalVectorCellIndex(...): Index " << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif
  tarch::la::Vector<dim,unsigned int> globalCellIndex(0);
  for (unsigned int d = 0; d < dim; d++){
    globalCellIndex[d] = localCellIndex[d] + _thisProcess[d]*_averageLocalNumberMacroscopicCells[d];
  }
  return globalCellIndex;
}




template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::convertGlobalToLocalVectorCellIndex(
tarch::la::Vector<dim,unsigned int> globalCellIndex) const {
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(globalCellIndex)){
    std::cout << "ERROR IndexConversion::convertGlobalToLocalVectorCellIndex(...): Index " << globalCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif
  tarch::la::Vector<dim,unsigned int> localCellIndex(0);
  for (unsigned int d = 0; d < dim; d++){
    localCellIndex[d] = globalCellIndex[d] - _thisProcess[d]*_averageLocalNumberMacroscopicCells[d];
  }
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidLocalVectorCellIndex(localCellIndex)){
    std::cout << "ERROR IndexConversion::convertGlobalToLocalVectorCellIndex(...): Index " << localCellIndex << " out of range!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif
  return localCellIndex;
}


template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::convertLocalToGlobalCellIndex(
unsigned int localCellIndex) const {
  // convert linearised index to vector index
  tarch::la::Vector<dim,unsigned int> vec = getLocalVectorCellIndex(localCellIndex);
  // convert local to global vector index
  vec = convertLocalToGlobalVectorCellIndex(vec);
  // return linearised global index
  return getGlobalCellIndex(vec);
}


template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::convertGlobalToLocalCellIndex(
unsigned int globalCellIndex) const {
  // convert linearised index to vector index
  tarch::la::Vector<dim,unsigned int> vec = getGlobalVectorCellIndex(globalCellIndex);
  // convert local to global vector index
  vec = convertGlobalToLocalVectorCellIndex(vec);
  // return linearised global index
  return getLocalCellIndex(vec);
}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::
getAverageLocalNumberMacroscopicCells() const { return _averageLocalNumberMacroscopicCells;}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::
getLocalNumberMacroscopicCells() const {return _localNumberMacroscopicCells;}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::
getGlobalNumberMacroscopicCells() const {return _globalNumberMacroscopicCells;}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::
getThisProcess() const {return _thisProcess;}


template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::getThisRank() const {return _rank;}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::
getNumberProcesses() const {return _numberProcesses;}


template<unsigned int dim>
tarch::la::Vector<dim,double> coupling::IndexConversion<dim>::
getGlobalMDDomainSize() const { return _globalMDDomainSize; }


template<unsigned int dim>
tarch::la::Vector<dim,double> coupling::IndexConversion<dim>::
getGlobalMDDomainOffset() const { return _globalMDDomainOffset; }


template<unsigned int dim>
tarch::la::Vector<dim,double> coupling::IndexConversion<dim>::
getMacroscopicCellSize() const {return _macroscopicCellSize;}



template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::
getGlobalVectorCellIndex(tarch::la::Vector<dim,double> position) const {
  tarch::la::Vector<dim,unsigned int> globalIndex(0);
  for (unsigned int d = 0; d < dim; d++){
    const double buf = position[d]-(_globalMDDomainOffset[d]-_macroscopicCellSize[d]);
    globalIndex[d] = (unsigned int) (buf/_macroscopicCellSize[d]);
  }

  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  if (!isValidGlobalVectorCellIndex(globalIndex)){
    std::cout << "ERROR IndexConversion::getGlobalVectorCellIndex(...): Invalid conversion for position " << position << " to global vector cell index " << globalIndex << "!" << std::endl;
    exit(EXIT_FAILURE);
  }
  #endif

  return globalIndex;
}


template<unsigned int dim>
bool coupling::IndexConversion<dim>::isValidGlobalVectorCellIndex(
tarch::la::Vector<dim,unsigned int> globalCellIndex) const {
  return isValidVectorCellIndex(globalCellIndex,_globalNumberMacroscopicCells);
}


template<unsigned int dim>
bool coupling::IndexConversion<dim>::isValidLocalVectorCellIndex(
tarch::la::Vector<dim,unsigned int> localCellIndex) const {
  return isValidVectorCellIndex(localCellIndex,_localNumberMacroscopicCells);
}


template<unsigned int dim>
bool coupling::IndexConversion<dim>::isValidGlobalCellIndex(unsigned int globalIndex) const {
  unsigned int range = _globalNumberMacroscopicCells[0]+2;
  for (unsigned int d = 1; d < dim; d++){ range = range*(_globalNumberMacroscopicCells[d]+2); }
  return isValidCellIndex(globalIndex,range);
}


template<unsigned int dim>
bool coupling::IndexConversion<dim>::isValidLocalCellIndex(unsigned int localIndex) const {
  unsigned int range = _localNumberMacroscopicCells[0]+2;
  for (unsigned int d = 1; d < dim; d++){ range = range*(_localNumberMacroscopicCells[d]+2); }
  return isValidCellIndex(localIndex,range);
}



template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::getCellIndex(
tarch::la::Vector<dim,unsigned int> vectorCellIndex, const tarch::la::Vector<dim,unsigned int>& numberCells) const {
  unsigned int index = vectorCellIndex[dim-1];
  for (int d = dim-2; d >-1; d--){
    index = (numberCells[d]+2)*index + vectorCellIndex[d];
  }
  return index;
}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::
initAverageLocalNumberMacroscopicCells(tarch::la::Vector<dim,unsigned int> globalNumberMacroscopicCells,
tarch::la::Vector<dim,unsigned int> numberProcesses) const {
  tarch::la::Vector<dim,unsigned int> avg(0);
  for (unsigned int d = 0; d < dim; d++){
    avg[d] = globalNumberMacroscopicCells[d]/numberProcesses[d];
  }
  return avg;
}


template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversion<dim>::initLocalNumberMacroscopicCells(
tarch::la::Vector<dim,unsigned int> globalNumberMacroscopicCells, tarch::la::Vector<dim,unsigned int> numberProcesses,
unsigned int rank) const {
  tarch::la::Vector<dim,unsigned int> local(0);
  const tarch::la::Vector<dim,unsigned int> avgNumberCells = initAverageLocalNumberMacroscopicCells(globalNumberMacroscopicCells,numberProcesses);
  const tarch::la::Vector<dim,unsigned int> thisProcess = getProcessCoordinates(rank);

  for (unsigned int d=0; d < dim; d++){
    // if this process is not the "last" one along one dimension, we use the avg. number of cells...
    if ( thisProcess[d] != numberProcesses[d]-1 ){
      local[d] = avgNumberCells[d];
    // ... otherwise (=last process), we fill up with the rest of the cells
    } else {
      local[d] = globalNumberMacroscopicCells[d]-thisProcess[d]*avgNumberCells[d];
    }
  }
  return local;
}


template<unsigned int dim>
bool coupling::IndexConversion<dim>::isValidVectorCellIndex(
tarch::la::Vector<dim,unsigned int> index, const tarch::la::Vector<dim,unsigned int> &range ) const {
  bool valid = true;
  for (unsigned int d = 0; d < dim; d++){
    valid = valid && (index[d] < range[d]+2);
  }
  return valid;
}


template<unsigned int dim>
bool coupling::IndexConversion<dim>::isValidCellIndex(unsigned int index,
const unsigned int &range) const {
  return (index < range);
}


template<unsigned int dim>
tarch::la::Vector<dim,double> coupling::IndexConversion<dim>::initMacroscopicCellSize(
  const tarch::la::Vector<dim,double> &globalMDDomainSize,
  const tarch::la::Vector<dim,unsigned int> &globalNumberMacroscopicCells
) const {
  tarch::la::Vector<dim,double> cellsize = globalMDDomainSize;
  for (unsigned int d = 0; d < dim; d++){
    cellsize[d] = cellsize[d]/globalNumberMacroscopicCells[d];
  }
  return cellsize;
}


template<unsigned int dim>
unsigned int coupling::IndexConversion<dim>::
getUniqueRankForMacroscopicCell(tarch::la::Vector<dim,unsigned int> globalCellIndex) const {
  tarch::la::Vector<dim,unsigned int> processCoords(0);
  for (unsigned int d = 0; d < dim; d++){
    // special case: cell in first section
    if ( globalCellIndex[d] < _averageLocalNumberMacroscopicCells[d]+1 ){
      processCoords[d] = 0;
    // special case: cell in last section
    } else if ( globalCellIndex[d] > _averageLocalNumberMacroscopicCells[d]*(_numberProcesses[d]-1) ){
      processCoords[d] = _numberProcesses[d]-1;
    // all other cases
    } else {
      // remove ghost layer contribution from vector index (...-1)
      processCoords[d] = (globalCellIndex[d]-1)/_averageLocalNumberMacroscopicCells[d];
    }
  }

  return getRank(processCoords);
}


template<unsigned int dim>
std::vector<unsigned int> coupling::IndexConversion<dim>::
getRanksForMacroscopicCell(tarch::la::Vector<dim,unsigned int> globalCellIndex) const {
  std::vector<unsigned int> ranks;

  // start and end coordinates of neighboured cells.
  tarch::la::Vector<3,unsigned int> start(0);
  tarch::la::Vector<3,unsigned int> end(0);
  tarch::la::Vector<3,unsigned int> loopIndex(0);

  // determine up to 3^dim neighboured cells in the surrounding of globalCellIndex;
  // reduce this number if globalCellIndex lies on the global boundary
  for (unsigned int d = 0; d < dim; d++){
    if (globalCellIndex[d] > 0){start[d] = globalCellIndex[d]-1;}
    end[d] = _globalNumberMacroscopicCells[d] + 1;
    if (globalCellIndex[d] < end[d]  ){end[d] = globalCellIndex[d]+1;}
  }


  // loop over neighbouring regions
  for (loopIndex[2] = start[2]; loopIndex[2] <= end[2]; loopIndex[2]++){
    for (loopIndex[1] = start[1]; loopIndex[1] <= end[1]; loopIndex[1]++){
      for (loopIndex[0] = start[0]; loopIndex[0] <= end[0]; loopIndex[0]++){

        // determine the global cell index of this particular grid cell
        tarch::la::Vector<dim,unsigned int> thisGlobalCellIndex(0);
        for (unsigned int d = 0; d <dim; d++){thisGlobalCellIndex[d] = loopIndex[d];}

        // determine the unique rank for this cell
        const unsigned int rank = getUniqueRankForMacroscopicCell(thisGlobalCellIndex);

        // add this rank to the vector with all ranks if we did not add this one before
        bool isContained = false;
        const unsigned int thisSize = (unsigned int) ranks.size();
        for (unsigned int i = 0; i < thisSize; i++){
          if (ranks[i] == rank){isContained=true; break;}
        }
        if (!isContained){ranks.push_back(rank);}
      }
    }
  }

  return ranks;
}
