// Copyright (C) 2016 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

#include <exception>


/** We need an exception for methods which return vector indices
 * in order to identify invalid method returns 
 */
class NoIndexException: public std::exception {
  virtual const char* what() const throw() {
    return "No valid index found";
  }
} noIndexException;


template<class LinkedCell, unsigned int dim>
void 
coupling::MultiMDMediator<LinkedCell, dim>
::addMDSimulation() 
{
  // Check if there is any inactive md simulation
  // and, if not, add another block of simulation slots
  if(getNumberOfActiveMDSimulations() == _multiMDService.getTotalNumberOfMDSimulations()) {
    addMDSimulationBlock();
  }
  unsigned int comm = findFirstCommWithLowLoad();
  addMDSimulation(comm);
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell, dim>
::addMDSimulation(const unsigned int & communicator)
{
  if(communicator >= _multiMDService.getNumberLocalComms()) {
    std::cout << "ERROR Invalid communicator group id " << communicator << "!" << std::endl;
    std::exit(EXIT_FAILURE);
  }
  // May have to add another block if communicator is full
  if(getNumberOfActiveMDSimulations(communicator) == _listActiveMDSimulations[communicator].size()) { addMDSimulationBlock(); }

  try {
    unsigned int index = findInactiveLocalIndex(communicator);
    unsigned int slot = communicator * _multiMDService.getLocalNumberOfMDSimulations() + index;
    _multiMDCellService.addMDSimulation(_instanceHandling, _macroscopicSolverInterface, slot);
    _listActiveMDSimulations[communicator][index] = true;
  } catch (NoIndexException& e) {
    std::cout << "ERROR coupling::MultiMDMediator::addMDSimulation() : Unable to find valid md index!";
  }
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell, dim>
::addNMDSimulations(const unsigned int & n) {
 for(unsigned int i=0;i<n;++i) {
   addMDSimulation();
 }
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell, dim>
::addNMDSimulations(const unsigned int & n, const unsigned int & communicator) {
  for(unsigned int i=0;i<n;++i) {
    addMDSimulation(communicator);
  }
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell, dim>::rmMDSimulation() 
{
  if(_multiMDService.getLocalNumberOfMDSimulations() < 2) {
    // We need each communicator to have at least one active simulation running
    // otherwise all processes on this communicator would quickly run into shutdown
    // and thus would not be accessible to the simulation anymore.
    std::cout << "INFO MultiMDCellService::rmMDSimulation() : Cannot remove MD simulation, only one is left!" << std::endl;
    return;
  }

  try {
    unsigned int comm = findFirstCommWithHighLoad();
    unsigned int index = findActiveLocalIndex(comm);

    // get next logical simulation which would be removed
    unsigned int slot = comm * _multiMDService.getLocalNumberOfMDSimulations() + index;  

    _multiMDCellService.rmMDSimulation(_instanceHandling, slot);

    _listActiveMDSimulations[comm][index] = false;
  } catch (NoIndexException& e) {
    std::cout << "NoIndexEsception!" << std::endl;
    std::exit(EXIT_FAILURE);
  }
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell, dim>
::rmMDSimulation(const unsigned int & communicator, const unsigned int & localIndex) 
{
  if(_multiMDService.getLocalNumberOfMDSimulations() < 2) {
    // We need each communicator to have at least one active simulation running
    // otherwise all processes on this communicator would quickly run into shutdown
    // and thus would not be accessible to the simulation anymore.
    std::cout << "INFO MultiMDCellService::rmMDSimulation() : Cannot remove MD simulation, only one is left!" << std::endl;
    return;
  }

  unsigned int slot = communicator * _multiMDService.getLocalNumberOfMDSimulations() + localIndex;

  if (slot >= _multiMDService.getTotalNumberOfMDSimulations()) {
    std::cout << "WARNING MultiMDMediator::rmMDSimulation() : Invalid md slot!" << std::endl;
    return;
  }

  _multiMDCellService.rmMDSimulation(_instanceHandling, slot);

  _listActiveMDSimulations[communicator][localIndex] = false;
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell, dim>
::rmMDSimulation(const unsigned int & communicator)
{
  if(communicator >= _multiMDService.getNumberLocalComms()) {
    std::cout << "WARNING MultiMDMediator::rmMDSimulation() : Invalid communicator " << communicator << "!" << std::endl;
    return;
  }
  if(getNumberOfActiveMDSimulations(communicator) < 2) {
    // We need each communicator to have at least one active simulation running
    // otherwise all processes on this communicator would quickly run into shutdown
    // and thus would not be accessible to the simulation anymore.
    std::cout << "INFO MultiMDCellService::rmMDSimulation() : Cannot remove MD simulation, only one is left!" << std::endl;
    return;
  }

  try {
    unsigned int index = findActiveLocalIndex();
    if(index == 0) {
      std::cout << "WARNING MultiMDMediator::rmMDSimulation(comm) : Trying to remove last remaining simulation!" << std::endl;
      return;
    }
    unsigned int slot = communicator * _multiMDService.getLocalNumberOfMDSimulations() + index;

    _multiMDCellService.rmMDSimulation(_instanceHandling, slot);

    _listActiveMDSimulations[communicator][index] = false;
  } catch (NoIndexException& e) {
    std::cout << "ERROR coupling::MultiMDMediator::addMDSimulation() : Unable to find valid md index!";
  }
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell, dim>
::rmNMDSimulations(const unsigned int & N) {
  for(unsigned int i=0;i<N;++i) {
    rmMDSimulation();
  }
}


template<class LinkedCell, unsigned int dim>
void coupling::MultiMDMediator<LinkedCell, dim>
::shutdownCommunicator(const unsigned int & communicator) {

  if(communicator >= _multiMDService.getNumberLocalComms()) {
    std::cout << "WARNING MultiMDMediator::rmMDSimulation() : Invalid communicator " << communicator << "!" << std::endl;
    return;
  }
  for(unsigned int i=0;i<_listActiveMDSimulations[communicator].size();++i) {
    if(!_listActiveMDSimulations[communicator][i]) { continue; }
    unsigned int slot = communicator * _multiMDService.getLocalNumberOfMDSimulations() + i;
    _multiMDCellService.rmMDSimulation(_instanceHandling, slot);

    _listActiveMDSimulations[communicator][i] = false;
  }
}


template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell,dim>
::addMDSimulationBlock() 
{
  _multiMDCellService.addSimulationBlock();

  _multiMDService.addMDSimulationBlock();

  for(auto & group : _listActiveMDSimulations) {
    group.push_back(false);
  }
}

template<class LinkedCell, unsigned int dim>
void
coupling::MultiMDMediator<LinkedCell,dim>
::rmMDSimulationBlock() 
{
  _multiMDCellService.removeSimulationBlock();

  for(auto & group : _listActiveMDSimulations) {
    group.pop_back();
  }

  _multiMDService.removeMDSimulationBlock();
}


template<class LinkedCell, unsigned int dim>
unsigned int
coupling::MultiMDMediator<LinkedCell, dim>
::getNumberOfActiveMDSimulations() {
  unsigned int result = 0;
  for(auto & commList : _listActiveMDSimulations) {
    for(bool entry : commList) {
      result += entry ? 1 : 0;
    }
  }

  return result;
}


template<class LinkedCell, unsigned int dim>
unsigned int
coupling::MultiMDMediator<LinkedCell, dim>
::getNumberOfActiveMDSimulations(const unsigned int communicator) {
  unsigned int result = 0;
  for(bool entry : _listActiveMDSimulations[communicator]) {
    result += entry ? 1 : 0;
  }
  return result;
}


template<class LinkedCell, unsigned int dim>
unsigned int
coupling::MultiMDMediator<LinkedCell, dim>
::getAvgNumberOfActiveMDSimulations() {
  unsigned int result = 0;
  for(auto & commList : _listActiveMDSimulations) {
    for(bool entry : commList) {
      result += entry ? 1 : 0;
    }
  }
  // Round result to the nearest integer
  return (result + _multiMDService.getNumberLocalComms() / 2) / _multiMDService.getNumberLocalComms();
}


template<class LinkedCell, unsigned int dim>
unsigned int
coupling::MultiMDMediator<LinkedCell, dim>
::findFirstCommWithLowLoad() {
  // Starting at the end
  unsigned int avg = getAvgNumberOfActiveMDSimulations();
  for(unsigned int i=_listActiveMDSimulations.size()-1;i>=0;++i) {
    if (getNumberOfActiveMDSimulations(i) <= avg) return i;
  }
  throw noIndexException;
}


template<class LinkedCell, unsigned int dim>
unsigned int
coupling::MultiMDMediator<LinkedCell, dim>
::findFirstCommWithHighLoad() {
  unsigned int avg = getAvgNumberOfActiveMDSimulations();
  for(unsigned int i=0;i<_listActiveMDSimulations.size();++i) {
    if (getNumberOfActiveMDSimulations(i) >= avg) return i;
  }
  throw noIndexException;
}


template<class LinkedCell, unsigned int dim>
unsigned int
coupling::MultiMDMediator<LinkedCell, dim>
::findInactiveLocalIndex(const unsigned int & communicator) {
  for(unsigned int i=0;i<_listActiveMDSimulations[communicator].size();++i) {
    if(!_listActiveMDSimulations[communicator][i]) return i;
  }
  throw noIndexException;
}


template<class LinkedCell, unsigned int dim>
unsigned int
coupling::MultiMDMediator<LinkedCell, dim>
::findActiveLocalIndex(const unsigned int & communicator) {
  for(unsigned int i=_listActiveMDSimulations[communicator].size()-1;i>=0;++i) {
    if(_listActiveMDSimulations[communicator][i]) return i;
  }
  throw noIndexException;
}