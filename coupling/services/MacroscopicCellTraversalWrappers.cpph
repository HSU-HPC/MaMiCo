// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico
#ifndef _MOLECULARDYNAMICS_COUPLING_MACROSCOPICCELLTRAVERSALWRAPPERS_H_
#define _MOLECULARDYNAMICS_COUPLING_MACROSCOPICCELLTRAVERSALWRAPPERS_H_

/** the following wrappers and smaller functional classes are included in the
 * MacroscopicCellServiceImpl for internal use in this class only. They are used
 * together with the applyTo...() methods of MacroscopicCells to bring
 *  functionality which is defined cellwise onto the grid of macroscopic cells.
 *  @author Philipp Neumann
 */

/** wrapper to carry out functionality on a single macroscopic cell. This
 * function can be called on several macroscopic cells using the callback
 * patterns of MacroscopicCells. In the following, several wrappers are provided
 * for the TransferStrategy as well as some further functional stuff which is
 * required from the MacroscopicCellServiceImpl.
 */
class Wrapper {
public:
  Wrapper(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : _thisPtr(thisPtr) {}
  virtual ~Wrapper() {}
  virtual void beginCellIteration() = 0;
  virtual void endCellIteration() = 0;
  virtual void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) = 0;

protected:
  coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *_thisPtr;
};

/** wrapper for method
 * processInnerMacroscopicCellBeforeReceivingMacroscopicSolverData of
 * TransferStrategy */
class Wrapper4ProcessInnerMacroscopicCellBeforeReceivingMacroscopicSolverData
    : public Wrapper {
public:
  Wrapper4ProcessInnerMacroscopicCellBeforeReceivingMacroscopicSolverData(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->beginProcessInnerMacroscopicCellsBeforeReceivingMacroscopicSolverData();
  }
  void endCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->endProcessInnerMacroscopicCellsBeforeReceivingMacroscopicSolverData();
  }
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_transferStrategy
        ->processInnerMacroscopicCellBeforeReceivingMacroscopicSolverData(
            cell, index);
  }
};

/** wrapper for method
 * processOuterMacroscopicCellBeforeReceivingMacroscopicSolverData of
 * TransferStrategy */
class Wrapper4ProcessOuterMacroscopicCellBeforeReceivingMacroscopicSolverData
    : public Wrapper {
public:
  Wrapper4ProcessOuterMacroscopicCellBeforeReceivingMacroscopicSolverData(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->beginProcessOuterMacroscopicCellsBeforeReceivingMacroscopicSolverData();
  }
  void endCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->endProcessOuterMacroscopicCellsBeforeReceivingMacroscopicSolverData();
  }

  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_transferStrategy
        ->processOuterMacroscopicCellBeforeReceivingMacroscopicSolverData(
            cell, index);
  }
};

/** wrapper for method
 * processInnerMacroscopicCellAfterReceivingMacroscopicSolverData of
 * TransferStrategy */
class Wrapper4ProcessInnerMacroscopicCellAfterReceivingMacroscopicSolverData
    : public Wrapper {
public:
  Wrapper4ProcessInnerMacroscopicCellAfterReceivingMacroscopicSolverData(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->beginProcessInnerMacroscopicCellsAfterReceivingMacroscopicSolverData();
  }
  void endCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->endProcessInnerMacroscopicCellsAfterReceivingMacroscopicSolverData();
  }
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_transferStrategy
        ->processInnerMacroscopicCellAfterReceivingMacroscopicSolverData(cell,
                                                                         index);
  }
};

/** wrapper for method
 * processOuterMacroscopicCellAfterReceivingMacroscopicSolverData of
 * TransferStrategy */
class Wrapper4ProcessOuterMacroscopicCellAfterReceivingMacroscopicSolverData
    : public Wrapper {
public:
  Wrapper4ProcessOuterMacroscopicCellAfterReceivingMacroscopicSolverData(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->beginProcessOuterMacroscopicCellsAfterReceivingMacroscopicSolverData();
  }
  void endCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->endProcessOuterMacroscopicCellsAfterReceivingMacroscopicSolverData();
  }
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_transferStrategy
        ->processOuterMacroscopicCellAfterReceivingMacroscopicSolverData(cell,
                                                                         index);
  }
};

/** wrapper for method processInnerMacroscopicCellBeforeSendingMDSolverData of
 * TransferStrategy */
class Wrapper4ProcessInnerMacroscopicCellBeforeSendingMDSolverData
    : public Wrapper {
public:
  Wrapper4ProcessInnerMacroscopicCellBeforeSendingMDSolverData(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->beginProcessInnerMacroscopicCellsBeforeSendingMDSolverData();
  }
  void endCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->endProcessInnerMacroscopicCellsBeforeSendingMDSolverData();
  }
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_transferStrategy
        ->processInnerMacroscopicCellBeforeSendingMDSolverData(cell, index);
  }
};

/** wrapper for method processOuterMacroscopicCellBeforeSendingMDSolverData of
 * TransferStrategy */
class Wrapper4ProcessOuterMacroscopicCellBeforeSendingMDSolverData
    : public Wrapper {
public:
  Wrapper4ProcessOuterMacroscopicCellBeforeSendingMDSolverData(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->beginProcessOuterMacroscopicCellsBeforeSendingMDSolverData();
  }
  void endCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->endProcessOuterMacroscopicCellsBeforeSendingMDSolverData();
  }
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_transferStrategy
        ->processOuterMacroscopicCellBeforeSendingMDSolverData(cell, index);
  }
};

/** wrapper for method processInnerMacroscopicCellAfterMDTimestep of
 * TransferStrategy */
class Wrapper4ProcessInnerMacroscopicCellAfterMDTimestep : public Wrapper {
public:
  Wrapper4ProcessInnerMacroscopicCellAfterMDTimestep(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->beginProcessInnerMacroscopicCellsAfterMDTimestep();
  }
  void endCellIteration() {
    Wrapper::_thisPtr->_transferStrategy
        ->endProcessInnerMacroscopicCellsAfterMDTimestep();
  }
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_transferStrategy
        ->processInnerMacroscopicCellAfterMDTimestep(cell, index);
  }
};

/** computes and stores the current velocity in each non-ghost macroscopic cell.
 */
class Wrapper4ComputeAndSetCurrentVelocity : public Wrapper {
public:
  Wrapper4ComputeAndSetCurrentVelocity(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {}
  void endCellIteration() {}
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    coupling::cellmappings::ComputeMomentumMapping<LinkedCell, dim>
        computeMomentumMapping(Wrapper::_thisPtr->_mdSolverInterface);
    cell.iterateConstCells(computeMomentumMapping);
    const tarch::la::Vector<dim, double> velocity =
        computeMomentumMapping.getMeanVelocity();
    cell.setCurrentVelocity(velocity);
  }
};

/** calls the MomentumInsertion-mechanisms on each non-ghost macroscopic cell,
 * including the energy controller */
class Wrapper4DistributeMomentum : public Wrapper {
public:
  Wrapper4DistributeMomentum(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr,
      unsigned int t)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {}
  void endCellIteration() {}
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    const double temperature =
        Wrapper::_thisPtr->_kineticEnergyController.computeTemperature(cell);
    Wrapper::_thisPtr->_momentumInsertion->insertMomentum(cell, index);
    Wrapper::_thisPtr->_kineticEnergyController.setTemperature(cell,
                                                               temperature);
  }
};

/** computes and stores the temperature value in all non-ghost cells. If the
 * temperature parameter is set to -1.0, the current temperature of the
 * molecules in this cell is stored. Otherwise, the temperature variable is used
 * and applied to the molecules using the thermostat of the
 * KineticEnergyController.
 */
class Wrapper4ComputeAndStoreTemperature : public Wrapper {
public:
  Wrapper4ComputeAndStoreTemperature(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr,
      double temperature)
      : Wrapper(thisPtr), _temperature(temperature) {}

  void beginCellIteration() {}
  void endCellIteration() {}
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    // if this value is -1.0, we just set the temperature in the cell according
    // to current temperature...
    if (_temperature == -1.0) {
      const double myTemperature =
          Wrapper::_thisPtr->_kineticEnergyController.computeTemperature(cell);
      cell.setTemperature(myTemperature);
      // otherwise we use the temperature value of _setTemperature
    } else {
      cell.setTemperature(_temperature);
      Wrapper::_thisPtr->_kineticEnergyController.setTemperature(cell,
                                                                 _temperature);
    }
  }

private:
  const double _temperature;
};

/** applies the thermostat in all non-ghost cells */
class Wrapper4ApplyTemperature : public Wrapper {
public:
  Wrapper4ApplyTemperature(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {}
  void endCellIteration() {}
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    const double temperature = cell.getTemperature();
    Wrapper::_thisPtr->_kineticEnergyController.setTemperature(cell,
                                                               temperature);
  }
};

/** applies the boundary force in all non-ghost cells which are close to an open
 * boundary */
class Wrapper4ApplyBoundaryForce : public Wrapper {
public:
  Wrapper4ApplyBoundaryForce(
      coupling::services::MacroscopicCellServiceImpl<LinkedCell, dim> *thisPtr)
      : Wrapper(thisPtr) {}

  void beginCellIteration() {}
  void endCellIteration() {}
  void apply(
      coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell, dim>
          &cell,
      const unsigned int &index) {
    Wrapper::_thisPtr->_boundaryForceController->applyBoundaryForce(cell,
                                                                    index);
  }
};
#endif // _MOLECULARDYNAMICS_COUPLING_MACROSCOPICCELLTRAVERSALWRAPPERS_H_
