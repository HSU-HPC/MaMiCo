// Member functions of coupling::filtering::FilterJunction

template <class Container_T, unsigned int dim, std::size_t inputc>
int coupling::filtering::FilterJunction<Container_T, dim, inputc>::loadFiltersFromXML(
    tinyxml2::XMLElement* sequenceNode) { // in our case "junctionNode" would be more precise
  if (!sequenceNode)
    return EXIT_FAILURE;

  // null if junction is empty
  tinyxml2::XMLElement* currJunctorNode = sequenceNode->FirstChildElement();

  std::array<Container_T, inputc> inputCellVector = _inputCellVector_parted;
#ifdef DEBUG_FILTER_PIPELINE
  std::cout << PRINT_PREFIX() << "Initializing junctor objects." << std::endl;
#endif

  // Keep track of this for each indivial input partition.
  [[maybe_unused]] bool firstIteration[inputc] = {true};

  while (currJunctorNode) {

    // All Junctors must implement one of the {X,Y}-Junctor interfaces, each of
    // which implement FilterInterface.
    coupling::filtering::FilterInterface<dim>* newjunctor = nullptr;

    // TODO: reduce per-junctor customization: generalize!
    // ###############################################################
    // This is where you have to define how to handle each junctor individually.

    // NLM
    if (std::strcmp(currJunctorNode->Value(), "NLM") == 0) {

      // Optional parameters
      int inputp_unfiltered = 0; // default
      tarch::configuration::ParseConfiguration::readIntOptional(inputp_unfiltered, currJunctorNode, "input-unfiltered");
      int inputp_prefiltered = 1; // default
      tarch::configuration::ParseConfiguration::readIntOptional(inputp_prefiltered, currJunctorNode, "input-filtered");

      // check for invalid partition indexes
      for (auto p : {inputp_unfiltered, inputp_prefiltered}) {
        if (p < 0) {
          std::cout << PRINT_PREFIX() << "ERROR: Negative input or output lane index specified in XML:" << p << std::endl;
          return EXIT_FAILURE;
        }
        if (p >= (int)inputc) {
          std::cout << PRINT_PREFIX() << "ERROR: Input or output lane index specified in XML (" << p << ") is too large!" << std::endl;
          return EXIT_FAILURE;
        }
      }

      // Mandatory parameters
      int tws;
      if (currJunctorNode->QueryIntAttribute("time-window-size", &tws)) {
        std::cout << "ERROR: NLM filter misses attribute time-window-size in "
                     "config file."
                  << std::endl;
        exit(EXIT_FAILURE);
      }
      if (tws <= 2) {
        std::cout << "ERROR: NLM: time-window-size must be greater than two." << std::endl;
        exit(EXIT_FAILURE);
      }
      double sigsq;
      if (currJunctorNode->QueryDoubleAttribute("sigsq", &sigsq)) {
        std::cout << "ERROR: NLM filter misses attribute sigsq in config file." << std::endl;
        exit(EXIT_FAILURE);
      }
      if (sigsq < 0) {
        std::cout << "ERROR: NLM: sigsq must be greater than zero." << std::endl;
        exit(EXIT_FAILURE);
      }
      double hsq;
      if (currJunctorNode->QueryDoubleAttribute("hsq", &hsq)) {
        std::cout << "ERROR: NLM filter misses attribute hsq in config file." << std::endl;
        exit(EXIT_FAILURE);
      }
      if (hsq < 0) {
        std::cout << "ERROR: NLM: hsq must be greater than zero." << std::endl;
        exit(EXIT_FAILURE);
      }

      // Optional parameters
      double sigsq_rel = -1;
      tarch::configuration::ParseConfiguration::readDoubleOptional(sigsq_rel, currJunctorNode, "sigsq_rel");
      if (sigsq_rel > 1) {
        std::cout << "ERROR: NLM: sigsq_rel must be 0 <= sigsq_rel <= 1" << std::endl;
        exit(EXIT_FAILURE);
      }
      if (sigsq_rel >= 0) {
        std::cout << "INFO: NLM: sigsq adaptivity enabled, target value = " << sigsq_rel * 100 << " % " << std::endl;
      }

      double hsq_rel = -1;
      tarch::configuration::ParseConfiguration::readDoubleOptional(hsq_rel, currJunctorNode, "hsq_rel");
      if (hsq_rel > 1) {
        std::cout << "ERROR: NLM: hsq_rel must be 0 <= hsq_rel <= 1" << std::endl;
        exit(EXIT_FAILURE);
      }
      if (hsq_rel >= 0) {
        std::cout << "INFO: NLM: hsq adaptivity enabled, target value = " << hsq_rel * 100 << " % " << std::endl;
      }

      // Instantiation
      newjunctor = new coupling::filtering::NLM<dim>(inputCellVector[inputp_unfiltered], inputCellVector[inputp_prefiltered], this->_cellVector2,
                                                     coupling::filtering::FilterSequence<Container_T, dim>::_filteredValues, tws, sigsq, sigsq_rel, hsq, hsq_rel);

      // TODO: generalize this for arbitrary junctors?
      // Swapping for output partition
      if (firstIteration[0]) {
        inputCellVector[0] = this->_cellVector1;
        firstIteration[0] = false;
      }
      inputCellVector[0].swap(this->_cellVector2);
    }
    // ###############################################################

    // Unknown junctor identifier
    else {
      std::cout << "ERROR: Filter-Junction does not recognize junctor called " << currJunctorNode->Value() << std::endl;
      return EXIT_FAILURE;
    }

    coupling::filtering::FilterSequence<Container_T, dim>::_filters.push_back(newjunctor);
    currJunctorNode = currJunctorNode->NextSiblingElement();
  }

#ifdef DEBUG_FILTER_JUNCTIONS
  std::cout << PRINT_PREFIX();
  printOutputCellVector();
#endif

  return 0;
}
