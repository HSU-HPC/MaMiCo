// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamic::o

//Member functions of coupling::FilterSequence

//TODO: Change return to what _filters is.
template<unsigned int dim, std::size_t inputc, std::size_t outputc>
int coupling::FilterJunction<dim, inputc, outputc>::loadFiltersFromXML(tinyxml2::XMLElement* sequenceNode){ //in our case "junctionNode" would be more precise
	if(!sequenceNode) return EXIT_FAILURE;

	//null if junction is empty
    tinyxml2::XMLElement* currJunctorNode = sequenceNode->FirstChildElement();
	
	std::vector<coupling::datastructures::MacroscopicCell<dim>* > inputCellVector[inputc] = _inputDomainCellVector_parted;
	std::vector<coupling::datastructures::MacroscopicCell<dim>* > outputCellVector[inputc] = _domainCellVector2_parted;
	#ifdef DEBUG_FILTER_PIPELINE
	std::cout << PRINT_PREFIX() << "Initializing junctor objects." << std::endl;
	#endif	

	//Keep track of this for each indivial input partition.
	bool firstIteration[inputc] = { true };

    while(currJunctorNode){

		//All Junctors must implement one of the {X,Y}-Junctor interfaces, each of which implement FilterInterface.
		coupling::FilterInterface<dim>* newjunctor = nullptr;
		
	//TODO: reduce per-junctor customization: generalize!
	//###############################################################
	//This is where you have to define how to handle each junctor individually.

        //NLM
        if(std::strcmp(currJunctorNode->Value(), "NLM") == 0) {

			//Parameters
			int tws;
			//TODO: make the following customizable via XML.
			unsigned int inputlp_unfiltered = 0;
			unsigned int inputlp_prefiltered = 1;
			unsigned int outputp = 0;
	
			if(currJunctorNode->QueryIntAttribute("time-window-size", &tws)){
				std::cout << "ERROR: NLM filter misses attribute time-window-size in config file." << std::endl;
				exit(EXIT_FAILURE);
			}
			if(tws <= 2){
				std::cout << "ERROR: NLM: time-window-size must be greater than two." << std::endl;
				exit(EXIT_FAILURE);
			}

			//Instanciation
            coupling::FilterSequence<dim>::_filters.push_back(
				 new coupling::NLM<dim>(
					inputCellVector[inputlp_prefiltered],
					outputCellVector[outputp], 
					coupling::FilterSequence<dim>::_localDomainCellIndices,
					coupling::FilterSequence<dim>::_filteredValues, 
					coupling::FilterSequence<dim>::_ic, 
					tws)
			);


			//Swapping for output partition
			if(firstIteration[outputp]){
				inputCellVector[outputp] = _domainCellVector1_parted[outputp];
				firstIteration[outputp] = false;
			}
			inputCellVector[outputp].swap(outputCellVector[outputp]);

        }		
	//###############################################################

		//Unknown junctor identifier
        else {
			std::cout << "ERROR: Filter-Pipeline does not recognize junctor called " << currJunctorNode->Value() << std::endl;
            exit(EXIT_FAILURE);
        }

		currJunctorNode = currJunctorNode->NextSiblingElement();
	}

	#ifdef DEBUG_FILTER_JUNCTIONS
	std::cout << PRINT_PREFIX(); printOutputCellVector();
	#endif
	
	return 0;
}


