// This file is part of_outputCells_Localconditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico


//Implementation of SequentialFilter.h


//CONSTRUCTOR
template <unsigned int dim>
coupling::SequentialFilter<dim>::SequentialFilter(
	coupling::FilterInterface<dim>* filter,
	const coupling::IndexConversionMD2Macro<dim>* ic, //null if run locally i.e. parallel
	const MPI_Comm comm //null if run locally i.e. parallel
	):
	coupling::FilterInterface<dim>("SEQUENTIALIZED_FILTER"),
	_filter(filter),
	_ic(ic),
	_comm(comm),
	_processingRank(0), //TODO: Make this customizable.
	_myRank((int) _ic->getBaseIC()->getThisRank())
{
	#ifdef DEBUG_SEQ_FILTER
	std::cout << "		SEQFILTER (" << _myRank << "): Now initializing sequentialized Filter of type: " << _filter->getType() <<std::endl;
	#endif

	//init buffers to prevent later segfaults when calling data() on them
	_cellbuf = {};
	_indexbuf = {};

	//case: sequential
	if(_ic) {
		MPI_Comm_size(comm, &_commSize);	

		//allocate global cell data structures for processing rank only
		if( _processingRank == _myRank) {
			//filter's input cell pointers will be overwritten, but we need this information in contribute()
			
			_inputCells_Local = _filter->getInputCells(); 
			_outputCells_Local = _filter->getOutputCells(); 			
			_cellIndices_Local = _filter->getCellIndices(); 

			//Get linear domain size, i.e amount of cells in domain. Can probably be done more elegantly using base IC.
			auto domainSizeVector = _ic->getGlobalMD2MacroDomainSize();
			unsigned int domainSizeLinear = 1;
			for(unsigned int d = 0; d < dim; d++) domainSizeLinear *= domainSizeVector[d];
			for(unsigned int c = 0; c < domainSizeLinear ; c++) { //TODO: double check if this is the correct function. "global" ambiguity fixed?
				_inputCells_Global.push_back(new coupling::datastructures::MacroscopicCell<dim>());
				_outputCells_Global.push_back(new coupling::datastructures::MacroscopicCell<dim>());
				_cellIndices_Global.push_back(tarch::la::Vector<dim,unsigned int>(0));
			}
			
			//TODO: this solution is more elegant. didnt work though, std::reserve is weird sometimes.
			//Reserve space in global index vector. Indices will be communicated using MPI.
			//_cellIndices_Global.reserve(_inputCells_Global.size());

		}//if rank processing rank

		//Resize if buffers are too small to contain cell data
		if(_cellbuf.capacity() < 4+3*dim) {
			_cellbuf.resize(4+3*dim); 
			#ifdef DEBUG_SEQ_FILTER
			std::cout << "		SEQFILTER (" << _myRank << "): Cell buffer resized to: " << _cellbuf.size() << std::endl;
			#endif
		}
		//Resize if buffer is too small to contain all cell data
		if(_indexbuf.capacity() < dim) {
			_indexbuf.resize(dim); 
			#ifdef DEBUG_SEQ_FILTER
			std::cout << "		SEQFILTER (" << _myRank << "): Index buffer resized to: " << _indexbuf.size() << std::endl;
			#endif
		}
	}//if sequential

	//case: not sequential
	else {
		_commSize = 1;
		#ifdef DEBUG_SEQ_FILTER
		std::cout << "		SEQFILTER (" << _myRank << "): It will not run sequentially." << std::endl;
		#endif
	}
}

//MEMBER FUNCTIONS
template<unsigned int dim>
void coupling::SequentialFilter<dim>::operator()(){	
	if(_ic) {
		if(_processingRank == _myRank) {
			contribute();
			process(FILTER_SEQUENTIAL);
		}
		else contribute();
	}
	else process(FILTER_PARALLEL);
}


template<unsigned int dim>
coupling::datastructures::MacroscopicCell<dim>* coupling::SequentialFilter<dim>::getLocalInputCellOfIndex(tarch::la::Vector<dim,unsigned int> index) {
	#ifdef DEBUG_SEQ_FILTER
	//std::cout << "		SEQFILTER (" << _myRank << "): getLocalInputCellofIndex(): Now looking for index " << index << std::endl;
	#endif

	for(unsigned int i = 0; i < _cellIndices_Local.size(); i++) {
		if(_cellIndices_Local[i] == index) return _inputCells_Local[i];
	}
	throw std::runtime_error("SequentialFilter: getLocalInputCellofIndex(): Could not find index.");
}
		

template<unsigned int dim>
coupling::datastructures::MacroscopicCell<dim>* coupling::SequentialFilter<dim>::getLocalOutputCellOfIndex(tarch::la::Vector<dim,unsigned int> index) {
	#ifdef DEBUG_SEQ_FILTER
	//std::cout << "		SEQFILTER (" << _myRank << "): getLocalOutputCellofIndex(): Now looking for index " << index << std::endl;
	#endif

	for(unsigned int i = 0; i < _cellIndices_Local.size(); i++) {
		if(_cellIndices_Local[i] == index) return _outputCells_Local[i];
	}
	throw std::runtime_error("SequentialFilter: getLocalOutputCellofIndex(): Could not find index.");
}

		
//PRIVATE FUNCTIONS
template<unsigned int dim>
void coupling::SequentialFilter<dim>::contribute() {	
	#ifdef DEBUG_SEQ_FILTER
	std::cout << "		SEQFILTER (" << _myRank << "): Sending cells and indices." << std::endl;
	#endif

	if(_processingRank == _myRank) {
		//Count cells that we update. This should be equal to _inputCells_Global.size().
		unsigned int cellsUpdated = 0;
		
		//Iteratate over all (contributing) ranks...
		for(int rank = 0; rank < _commSize; rank++) { //TODO: allow arbitrary comms: with ranks < _commSize that are not in _comm

			//Case: The contributing rank is the processing rank. In this case, we only need to copy cell data.
			if(rank == _myRank) {
				#ifdef DEBUG_SEQ_FILTER
					std::cout << "		SEQFILTER (" << _myRank << "): Copying " << _inputCells_Local.size() << " cells from local on processing rank " << rank << std::endl;
				#endif

				//Copy all cell data to global data structures.
				for(unsigned int c = 0; c < _inputCells_Local.size(); c++) {
					*(_inputCells_Global[cellsUpdated]) = *(_inputCells_Local[c]);
					_cellIndices_Global[cellsUpdated] = _cellIndices_Local[c];
					cellsUpdated++;
				}

				#ifdef DEBUG_SEQ_FILTER
					std::cout << "		SEQFILTER (" << _myRank << "): Copied a total of " << cellsUpdated << " cells." << std::endl;
				#endif
			}

			//Case: the contributing rank is not the processing rank. We need to communicate cell data using MPI.
			else {
				//Receive number of cells+indices that will be sent from that rank
				unsigned int numberOfCellsFromRank;
				MPI_Recv(&numberOfCellsFromRank, 1, MPI_UNSIGNED, rank, 0, _comm, MPI_STATUS_IGNORE);
				#ifdef DEBUG_SEQ_FILTER
				std::cout << "		SEQFILTER (" << _myRank << "): Expecting a total of " << numberOfCellsFromRank << " cells and indices from rank " << rank << std::endl;
				#endif

				//Receive that many cells
				for(unsigned int c = 0; c < numberOfCellsFromRank; c++) {
					//receive cell
					MPI_Recv(_cellbuf.data(), 4+3*dim, MPI_DOUBLE, rank, 0, _comm, MPI_STATUS_IGNORE);
					//receive corresponding index
					MPI_Recv(_indexbuf.data(), dim, MPI_UNSIGNED, rank, 0, _comm, MPI_STATUS_IGNORE);

					//std::cout << "Seqfilter 172:" << c << ": " << _indexbuf[0] << ", " << _indexbuf[1] << ", " << _indexbuf[2] << std::endl;

					//Insert data received into global cell data structures
					bufferToMacroscopicCell(_cellbuf, _inputCells_Global[cellsUpdated]);
					bufferToCellIndex(_indexbuf, _cellIndices_Global[cellsUpdated]);
					
					cellsUpdated++;

					#ifdef DEBUG_SEQ_FILTER_VERBOSE
					std::cout << "			SEQFILTER (" << _myRank << "): Received cell and index (" << rank << ") from rank " << rank << std::endl;
					#endif

				}
			}

			#ifdef DEBUG_SEQ_FILTER
			std::cout << "		SEQFILTER (" << _myRank << "): Received cells and indices from rank " << rank << std::endl;
			#endif
		}	


		//TODO: Assert cellsUpdated == inputCells_Global.size()

		//This rank now processes...
	}
	else /* contributing rank */{
		
		//Communicate to processing rank how many cells+indices will be send
		unsigned int numberOfCellsFromThisRank = _filter->getInputCells().size();
		MPI_Send(&numberOfCellsFromThisRank, 1, MPI_UNSIGNED, _processingRank, 0, _comm);

		//Send that many cells (and indices)
		for(unsigned int c = 0; c < numberOfCellsFromThisRank; c++) {
			//fill buffers
			macroscopicCellToBuffer(_cellbuf, _filter->getInputCells()[c]);
			cellIndexToBuffer(_indexbuf, _ic->getBaseIC()->convertLocalToGlobalVectorCellIndex(_filter->getCellIndices()[c]));
			//std::cout << "Seqfilter 205:" << c << ": " << _indexbuf[0] << ", " << _indexbuf[1] << ", " << _indexbuf[2] << std::endl;

			//send cell
			MPI_Send(_cellbuf.data(), 4+3*dim, MPI_DOUBLE, _processingRank, 0, _comm);
			//send corresponding index
			MPI_Send(_indexbuf.data(), dim, MPI_UNSIGNED, _processingRank, 0, _comm);
		}

		//The processing rank now processes...

		//Receive output data
		for(unsigned int c = 0; c < numberOfCellsFromThisRank; c++) {
			//receive cell
			MPI_Recv(_cellbuf.data(), 4+3*dim, MPI_DOUBLE, _processingRank, 0, _comm, MPI_STATUS_IGNORE);
			//receive corresponding index
			MPI_Recv(_indexbuf.data(), 3, MPI_UNSIGNED, _processingRank, 0, _comm, MPI_STATUS_IGNORE);
			
			//find cell in filter's domain and apply
			tarch::la::Vector<dim, unsigned int> receivedIndex;
			bufferToCellIndex(_indexbuf, receivedIndex); //Do we even need this anywhere after this on the contributing rank? Note that this a global index also...
			bufferToMacroscopicCell(_cellbuf, _filter->getOutputCellOfIndex(_ic->getBaseIC()->convertGlobalToLocalVectorCellIndex(receivedIndex)));
		}
	}
}


template<unsigned int dim>
void coupling::SequentialFilter<dim>::process(bool sequential) {
	if(sequential) {
		_filter->updateCellData(_inputCells_Global, _outputCells_Global, _cellIndices_Global);
	}

	#ifdef DEBUG_SEQ_FILTER
		std::cout << "		SEQFILTER (" << _myRank << "): Now applying filter..." << std::endl;
	#endif

	//Apply _filter
	(*_filter)();

	#ifdef DEBUG_SEQ_FILTER
		std::cout << "		SEQFILTER (" << _myRank << "): ...done applying filter." << std::endl;
	#endif

	if(sequential) {
		//Now ready to distribute data back to the data's original ranks...
		for(unsigned int c = 0; c < _outputCells_Global.size(); c++) {
			//fill buffers with cell data
			macroscopicCellToBuffer(_cellbuf, _outputCells_Global[c]);
			cellIndexToBuffer(_indexbuf, _cellIndices_Global[c]);

			//get rank of cell
			int target_rank = _ic->getBaseIC()->getUniqueRankForMacroscopicCell(_cellIndices_Global[c]);
				
			#ifdef DEBUG_SEQ_FILTER_VERBOSE
				std::cout << "		SEQFILTER (" << _myRank << "): Sending cell of index " << _cellIndices_Global[c] << " to rank " << target_rank << std::endl;
			#endif

			//Case: cell belongs to this rank, no communication needed	
			if(target_rank == _processingRank) {
				bufferToMacroscopicCell(_cellbuf, getLocalOutputCellOfIndex(_cellIndices_Global[c]));

				#ifdef DEBUG_SEQ_FILTER_VERBOSE
					std::cout << "		SEQFILTER (" << _myRank << "): Wrote cell of index " << _cellIndices_Global[c] << " to local cell at " << getLocalOutputCellOfIndex(_cellIndices_Global[c]) << std::endl;
				#endif
			}
			//Case: other rank, we need to send cell and index
			else {
				//send cell
				MPI_Send(_cellbuf.data(), 4+3*dim, MPI_DOUBLE, target_rank, 0, _comm);
				//send corresponding index
				MPI_Send(_indexbuf.data(), 3, MPI_UNSIGNED, target_rank, 0, _comm);
			}
		}

		//Re-update _filter's internal member variables in order to ensure proper functionality of filters after this one, i.e. make getOutputVector() work as expected.
		_filter->updateCellData(_inputCells_Local, _outputCells_Local, _cellIndices_Local);
	}
}


template<unsigned int dim>
void coupling::SequentialFilter<dim>::macroscopicCellToBuffer(std::vector<double>& buf, const coupling::datastructures::MacroscopicCell<dim>* cell){
	//Resize if buffer is too small to contain cell data
	if(buf.capacity() < 4+3*dim) {
		buf.resize(4+3*dim); 
		#ifdef DEBUG_SEQ_FILTER
		std::cout << "		SEQFILTER (" << _myRank << "): Cell buffer resized to: " << buf.size() << std::endl;
		#endif
	}

	//copy cell data to buffer
	unsigned int i = 0;
	/*micro mass*/ 		buf[i] = cell->getMicroscopicMass(); i++; //std::cout << buf.back() << " ";
	/*micro momentum*/	for (unsigned d = 0; d < dim; d++) { buf[i] = cell->getMicroscopicMomentum()[d]; i++; /*std::cout << buf.back() << " ";*/ } 
	/*macro mass*/		buf[i] = cell->getMacroscopicMass(); i++; //std::cout << buf.back() << " ";
	/*macro momentum*/	for (unsigned d = 0; d < dim; d++) { buf[i] = cell->getMacroscopicMomentum()[d]; i++; /*std::cout << buf.back() << " ";*/ } 
	/*pot energy*/		buf[i] = cell->getPotentialEnergy(); i++; //std::cout << buf.back() << " ";
	/*velocity*/		for (unsigned d = 0; d < dim; d++) { buf[i] = cell->getCurrentVelocity()[d]; i++; /*std::cout << buf.back() << " ";*/ } 
	/*temperature*/		buf[i] = cell->getTemperature(); i++; //std::cout << buf.back() << " ";
	//std::cout << std::endl;
}


template<unsigned int dim>
void coupling::SequentialFilter<dim>::bufferToMacroscopicCell(const std::vector<double>& buf, coupling::datastructures::MacroscopicCell<dim>* cell) {
	if(buf.capacity() < 4+3*dim) throw std::runtime_error("Buffer too small for cell data!");

	tarch::la::Vector<dim, double> mvec_buf;
	unsigned int i = 0;
	//copy buffer data to cell
	/*micro mass*/ 		cell->setMicroscopicMass(buf[i]); i++;
	/*micro momentum*/	for(unsigned int d = 0; d < dim; d++) { mvec_buf[d] = buf[i]; i++; } cell->setMicroscopicMomentum(mvec_buf);
	/*macro mass*/		cell->setMacroscopicMass(buf[i]); i++;
	/*macro momentum*/	for(unsigned int d = 0; d < dim; d++) { mvec_buf[d] = buf[i]; i++; } cell->setMacroscopicMomentum(mvec_buf);
	/*pot energy*/		cell->setPotentialEnergy(buf[i]); i++;
	/*velocity*/		for(unsigned int d = 0; d < dim; d++) { mvec_buf[d] = buf[i]; i++; } cell->setCurrentVelocity(mvec_buf);
	/*temperature*/		cell->setTemperature(buf[i]); i++;
	//std::cout << cell << std::endl;
}


template<unsigned int dim>
void coupling::SequentialFilter<dim>::cellIndexToBuffer(std::vector<unsigned int>& buf, const tarch::la::Vector<dim, unsigned int>& index) {
	if(buf.capacity() < dim) buf.reserve(dim);
	for(unsigned int d = 0; d<dim; d++) buf[d] = index[d];
}


template<unsigned int dim>
void coupling::SequentialFilter<dim>::bufferToCellIndex(const std::vector<unsigned int>& buf, tarch::la::Vector<dim, unsigned int>& index) {
	for(unsigned int d = 0; d<dim; d++) index[d] = buf[d];
}
