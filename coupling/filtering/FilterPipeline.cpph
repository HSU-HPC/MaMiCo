// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

//Implementaions of a pipeline-like approach used for chanining and branching of filters for MacrosCopicCells.
//@Author Felix Maurer

//CLASS FILTER SEQUENCE
//Member functions of coupling::FilterSequence
template<unsigned int dim, class CellService>
void coupling::FilterSequence<dim, CellService>::initSequence(
    std::vector<coupling::datastructures::MacroscopicCell<dim>* > mdCellVector,
    std::vector<int> mdCellIndices
){
    //Reset data vectors
    _macroscopicCells.clear();
    _cellIndices.clear();

    //If the input of a sequence is not defined, it's assumed to be the default input i.e. MD
    if(_input == nullptr){
        for(auto mdCell : mdCellVector){
            _macroscopicCells.push_back(mdCell);
        }
        for(auto mdCellIndex : mdCellIndices){
            _cellIndices.push_back(mdCellIndex);
        }
        #ifdef DEBUG_FILTER_PIPELINE
        std::cout << "FP: Initialized sequence named " << _name << " with data from MD." << std::endl;
        #endif
    }
    else{
        for(auto mdCell : _input->getMacroscopicCells()){
            _macroscopicCells.push_back(mdCell);
        }
        for(auto mdCellIndex : _input->getCellIndices()){
            _cellIndices.push_back(mdCellIndex);
        }
        #ifdef DEBUG_FILTER_PIPELINE
        std::cout << "FP: Initialized sequence named " << _name << " with data from " << _input->getName() << std::endl;
        #endif
    }
}

//CLASS FILTER PIPELINE
//constructors of coupling::FilterPipeline
template<unsigned int dim, class CellService>
coupling::FilterPipeline<dim, CellService>::FilterPipeline(const std::string cfgpath){
        FilterPipeline(POST_MULTI_INSTANCE_FILTERING_NO, cfgpath);
}


template<unsigned int dim, class CellService>
coupling::FilterPipeline<dim, CellService>::FilterPipeline(
	bool postMultiInstance, 
	const std::string cfgpath)
	: _postMultiInstance(postMultiInstance)
{
    //check if provided file is written in proper XML
    if(_config.LoadFile(cfgpath.c_str()) != tinyxml2::XML_NO_ERROR){
        std::cout << "ERROR: Could not read config for Filter-Pipeline: XML syntax error." << std::endl;
        exit(EXIT_FAILURE);
    }
            
    //check for structural errors in config file
    if (!configIsValid(_config)) exit(EXIT_FAILURE);

    //load sequences
    if (_postMultiInstance){
        if(loadSequencesFromXML(_config.FirstChildElement("filter-pipeline")->FirstChildElement("post-multi-instance"))) exit(EXIT_FAILURE);
    }
    else if(loadSequencesFromXML(_config.FirstChildElement("filter-pipeline")->FirstChildElement("per-instance"))) exit(EXIT_FAILURE);
}

//member functions of coupling::FilterPipeline
template<unsigned int dim, class CellService>
void coupling::FilterPipeline<dim, CellService>::apply(CellService* cellService){
    
    //initialize (arbitrary) md data
    std::vector<coupling::datastructures::MacroscopicCell<dim>* > md_cells = cellService->getMacroscopicCells().getMacroscopicCells();
    std::vector<int> md_indices = {0,1};//TODO

    //load config
    tinyxml2::XMLElement* perInstanceNode = _config.FirstChildElement("filter-pipeline")->FirstChildElement("per-instance");

	//switch between PI and MI
	//TODO: dont copy all the sequences: pointers?
	std::vector<coupling::FilterSequence<dim, CellService>* > sequences;
	if(_postMultiInstance){
		sequences = _miSequences;
		#ifdef DEBUG_FILTER_PIPELINE
		std::cout << "FP: Starting to apply multi-instance filters." << std::endl;
		#endif
	}
	else{
		sequences = _piSequences;
		#ifdef DEBUG_FILTER_PIPELINE
		std::cout << "FP: Starting to apply per instance filters." << std::endl;
		#endif
	}

    for(coupling::FilterSequence<dim, CellService>* currSequence : sequences){
		#ifdef DEBUG_FILTER_PIPELINE
		std::cout << "FP: Applying sequence " << currSequence->getName() << std::endl;
		#endif
        currSequence->initSequence(md_cells, md_indices);
        tinyxml2::XMLElement* currSequenceNode = perInstanceNode->FirstChildElement(currSequence->getName());
        tinyxml2::XMLElement* currFilterNode = currSequenceNode->FirstChildElement();
        while(currFilterNode){
			#ifdef DEBUG_FILTER_PIPELINE
			std::cout << "FP: Applying filter of sequence  " << currSequence->getName() << ": ";
			#endif

            //Filter identifiers are hardcoded (for now at least):
            if(std::strcmp(currFilterNode->Value(), "write-to-file") == 0)
            {
				#ifdef DEBUG_FILTER_PIPELINE
				std::cout << "Write-To-File" << std::endl;
				#endif

                coupling::WriteToFile<dim> currFilter(
					currFilterNode->Attribute("file"),
					currFilterNode->Attribute("type"));
				//TODO: move this
                currSequence->setMacroscopicCells(
					currFilter.apply(currSequence->getMacroscopicCells(),  currSequence->getCellIndices()));
            }
            else if(std::strcmp(currFilterNode->Value(), "POD") == 0) {
                //TODO
                std::cout << "ERROR: Filter-Pipeline does not yet support POD." << std::endl;
                //exit(EXIT_FAILURE);
            }
            else if(std::strcmp(currFilterNode->Value(), "NLM") == 0) {
                //TODO
                std::cout << "ERROR: Filter-Pipeline does not yet support NLM." << std::endl;
                //exit(EXIT_FAILURE);
            }
            else {
                std::cout << "ERROR: Filter-Pipeline does not recognize Filter called " << currFilterNode->Value() << std::endl;
                //exit(EXIT_FAILURE);
            }
            //currFilter.apply(currSequence->getMacroscopicCells(), currSequence->getMacroscopicCells(), currSequence->getCellIndices());

            currFilterNode = currFilterNode->NextSiblingElement();
        }
		#ifdef DEBUG_FILTER_PIPELINE
		std::cout << "FP: Done applying sequence " << currSequence->getName() << std::endl;
		#endif
    }
}




//Private functions of coupling::FilterPipeline:
template<unsigned int dim, class CellService>
bool coupling::FilterPipeline<dim, CellService>::configIsValid(tinyxml2::XMLDocument& cfgfile){
    //Check main node 
    tinyxml2::XMLElement* node = cfgfile.FirstChildElement("filter-pipeline");
    if (!node){
        std::cout << "ERROR: Could not read config for Filter-Pipeline: missing element <filter-pipeline>" << std::endl;
        return false;
    }

    if (node->NextSiblingElement()){
        std::cout << "ERROR: Could not read config for Filter-Pipeline: should not contain more than one root element" << std::endl;
        return false;
    }

    //check existance of per-instance subtag
    tinyxml2::XMLElement* perInstanceTag = node->FirstChildElement("per-instance");
    if(!perInstanceTag){
        std::cout << "ERROR: Could not read config for Filter-Pipeline: missing element <per-instance>" << std::endl;
        return false;
    }
    //check existance of multi-instance subtag
    if(!node->FirstChildElement("post-multi-instance")){
            std::cout << "ERROR: Could not read config for Filter-Pipeline: missing element <post-multi-instance>" << std::endl;
            return false;
    }

        //No checks are done to determine if any more subtags of main node exist as they do not interfer with implementation of this class.
        //Syntax checking for sequence-subnodes can be found in their respective initializer methods.

    #ifdef DEBUG_FILTER_PIPELINE
    std::cout << "FP: Config is valid!" << std:: endl;
    #endif

    return true;
}

//Initializes name and input pointer (if input is MD, that pointer is null). Does NOT initialize any data.
template<unsigned int dim, class CellService>
int coupling::FilterPipeline<dim, CellService>::loadSequencesFromXML(tinyxml2::XMLElement* node){
    
    tinyxml2::XMLElement* currSequenceNode = node->FirstChildElement();
    std::vector<coupling::FilterSequence<dim, CellService> *> knownSequences;
    
    //Check if all outputs are specified before being used by sequences
    while(currSequenceNode){
        FilterSequence<dim, CellService>* inputFilterSequence = nullptr;
        const char* inputName = currSequenceNode->Attribute("input");

        if(!inputName) inputName = "md";
        bool sequenceRecognized = false;
        
        //search temp vector of known sequences
        for(auto seq : knownSequences){
            if(std::strcmp(seq->getName(), inputName) == 0) {
                inputFilterSequence = seq;
                sequenceRecognized = true;
                break;
            }
        }

        //"md" is the default input and is not associated to any sequence
        if(std::strcmp(inputName,"md") == 0) sequenceRecognized = true;
        
        if(!sequenceRecognized){
            std::cout << "ERROR: Filter-Pipeline: Invalid input " << inputName << " specified for sequence named " << currSequenceNode->Value() << std::endl;
            return EXIT_FAILURE;
        }

        //Add sequence to temp vector
        if(inputFilterSequence) knownSequences.push_back(new coupling::FilterSequence<dim, CellService>(currSequenceNode->Value(), inputFilterSequence));
        else knownSequences.push_back(new coupling::FilterSequence<dim, CellService>(currSequenceNode->Value()));

        //Proceed to iterate over next element
        currSequenceNode = currSequenceNode->NextSiblingElement();
    }

    if(_postMultiInstance){
        _miSequences = knownSequences;
		#ifdef DEBUG_FILTER_PIPELINE
        std::cout << "FP: Post multi-instance sequences loaded!" << std:: endl;
		#endif
    }
    else{
        _piSequences = knownSequences;
		#ifdef DEBUG_FILTER_PIPELINE
        std::cout << "FP: Per-instance sequences loaded!" << std:: endl;
		#endif
    }

    return 0;
}


/** 
TODO:
CellService doch nicht ins template?
*/
