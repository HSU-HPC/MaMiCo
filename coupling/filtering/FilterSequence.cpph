// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico


//Member functions of coupling::FilterSequence

template<unsigned int dim>
int coupling::FilterSequence<dim>::loadFiltersFromXML(tinyxml2::XMLElement* sequenceNode){
	if(!sequenceNode) return EXIT_FAILURE;
    tinyxml2::XMLElement* currFilterNode = sequenceNode->FirstChildElement();
	
	tarch::la::Vector<dim, double> domainStart;
	tarch::la::Vector<dim, double> domainEnd;
	tarch::la::Vector<dim, unsigned int> domainStartCell;
	tarch::la::Vector<dim, unsigned int> domainEndCell;

	std::vector<coupling::datastructures::MacroscopicCell<dim>* > inputCellVector = _inputCellVector;	
	std::vector<coupling::datastructures::MacroscopicCell<dim>* > outputCellVector = _cellVector2;	

	bool firstIteration = true;
    while(currFilterNode){
		#ifdef DEBUG_FILTER_PIPELINE
		std::cout << "FP: Initializing filter objects of sequence " << _name << ": ";
		#endif
		
		//TODO: implement tarch::configuration::readVectorOptional<...>(...), which returns nullptr if attribute doesnot exist
		tarch::configuration::ParseConfiguration::readVector<dim, double>(domainStart, currFilterNode, "domain-start");
		tarch::configuration::ParseConfiguration::readVector<dim, double>(domainEnd, currFilterNode, "domain-end");
		for(unsigned int d = 0; d < dim; d++){
			domainStartCell[d] = (unsigned int) std::floor(domainStart[d] / _indexConversion->getMacroscopicCellSize()[d]);
			domainEndCell[d] = (unsigned int) std::ceil(domainEnd[d] / _indexConversion->getMacroscopicCellSize()[d]);
		}

        if(std::strcmp(currFilterNode->Value(), "write-to-file") == 0){
            _filters.push_back(new coupling::WriteToFile<dim>(inputCellVector, outputCellVector, _cellIndices, domainStartCell, domainEndCell, currFilterNode->Attribute("location")));
        }
		else if(std::strcmp(currFilterNode->Value(), "gauss") == 0) {
            _filters.push_back(new coupling::Gauss<dim>(inputCellVector, outputCellVector, _cellIndices, domainStartCell, domainEndCell));
		}
        else if(std::strcmp(currFilterNode->Value(), "POD") == 0) {
       		//TODO
			std::cout << "ERROR: Filter-Pipeline does not yet support POD." << std::endl;
            exit(EXIT_FAILURE);
        }
        else if(std::strcmp(currFilterNode->Value(), "NLM") == 0) {
            //TODO
            std::cout << "ERROR: Filter-Pipeline does not yet support NLM." << std::endl;
            exit(EXIT_FAILURE);
        }
        else {
			std::cout << "ERROR: Filter-Pipeline does not recognize filter called " << currFilterNode->Value() << std::endl;
            exit(EXIT_FAILURE);
        }

		if(firstIteration){
			inputCellVector = _cellVector1;
			firstIteration = false;
		}
		inputCellVector.swap(outputCellVector);
        currFilterNode = currFilterNode->NextSiblingElement();
        }
	if(_filters.size() % 2 == 1) _outputCellVector = _cellVector2;
	else _outputCellVector = _cellVector1; 
	return 0;
}


template<unsigned int dim>
void coupling::FilterSequence<dim>::fillSequenceData(
    const std::vector<coupling::datastructures::MacroscopicCell<dim>* >& inputCellVector
){
	//in the beginning, input and output vector contain the same cells
	for(auto cell : inputCellVector){
		_inputCellVector.push_back(cell);
		_cellVector1.push_back(new coupling::datastructures::MacroscopicCell<dim>(*cell));
    	_cellVector2.push_back(new coupling::datastructures::MacroscopicCell<dim>(*cell));
	}
	#ifdef DEBUG_FILTER_PIPELINE
            std::cout << "FP: Created input and output cell vector for sequence " << _name << std::endl;
    #endif 
}
