// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamic::o

#include <typeinfo>

//Member functions of coupling::FilterSequence

//TODO: this is a mess
template<unsigned int dim>
int coupling::FilterSequence<dim>::loadFiltersFromXML(tinyxml2::XMLElement* sequenceNode){
	if(!sequenceNode) return EXIT_FAILURE;
    tinyxml2::XMLElement* currFilterNode = sequenceNode->FirstChildElement();
	
	std::vector<coupling::datastructures::MacroscopicCell<dim>* > inputCellVector = _inputDomainCellVector;	
	std::vector<coupling::datastructures::MacroscopicCell<dim>* > outputCellVector = _domainCellVector2;	
	#ifdef DEBUG_FILTER_PIPELINE
	std::cout << PRINT_PREFIX() << "Initializing filter objects." << std::endl;
	#endif	
	bool firstIteration = true;

    while(currFilterNode){
		coupling::FilterInterface<dim>* newfilter = nullptr;
		
	//###############################################################
	//This is where you have to define how to handle each filter individually.

		//Write To File
        if(std::strcmp(currFilterNode->Value(), "write-to-file") == 0){
			bool overwrite = false;
			if(currFilterNode->Attribute("overwrite"))
				if(std::strcmp(currFilterNode->Attribute("overwrite"), "true") == 0)
					overwrite = true;
            newfilter = new coupling::WriteToFile<dim>(inputCellVector, outputCellVector, _globalDomainCellIndices, _filteredValues, _localDomainCellIndices, currFilterNode->Attribute("location"), overwrite);
        }

		//Gauss
		else if(std::strcmp(currFilterNode->Value(), "gauss") == 0) {
			//dimension of gauss filter
			int d;
			if(currFilterNode->QueryIntAttribute("dim", &d)){
				std::cout << "ERROR: Gaussian filter misses attribute dim in config file." << std::endl;
				exit(EXIT_FAILURE);
			}
				
			//"extrapolation" is not mandatory			
			const char* extrapolation;
			extrapolation = currFilterNode->Attribute("extrapolation");

			newfilter = new coupling::Gauss<dim>(inputCellVector, outputCellVector, _localDomainCellIndices, _filteredValues, (unsigned int) d, extrapolation);
		}

		//POD
        else if(std::strcmp(currFilterNode->Value(), "POD") == 0) {
			//In earlier implementations, it used to be possible to override tws via function parameter. This feature was removed.
			//See: coupling::noisereduction::NoiseReductionConfiguration::interpreteConfiguration<dim>(..., int tws)
			int tws;
			if(currFilterNode->QueryIntAttribute("time-window-size", &tws)){
				std::cout << "ERROR: POD filter misses attribute time-window-size in config file." << std::endl;
				exit(EXIT_FAILURE);
			}
			if(tws <= 2){
				std::cout << "ERROR: POD: time-window-size must be greater than two." << std::endl;
				exit(EXIT_FAILURE);
			}
			int kmax;
			if(currFilterNode->QueryIntAttribute("kmax", &kmax)){
				std::cout << "ERROR: POD filter misses attribute kmax in config file." << std::endl;
				exit(EXIT_FAILURE);
			}
			if(kmax <= 0){
				std::cout << "ERROR: POD: kmax must be greater than zero.";
				exit(EXIT_FAILURE);
			}

            newfilter = new coupling::POD<dim>(inputCellVector, outputCellVector, _localDomainCellIndices, _filteredValues, _multiMDService, tws, kmax);
        }

		//Strouhal
		else if(std::strcmp(currFilterNode->Value(), "strouhal") == 0) {
			double d;
			if(currFilterNode->QueryDoubleAttribute("D", &d)){
				std::cout << "ERROR: Strouhal filter misses attribute D in config file." << std::endl;
				exit(EXIT_FAILURE);
			}
			double u;
			if(currFilterNode->QueryDoubleAttribute("U", &u)){
				std::cout << "ERROR: Strouhal filter misses attribute U in config file." << std::endl;
				exit(EXIT_FAILURE);
			}
			newfilter = new coupling::Strouhal<dim>(inputCellVector, outputCellVector, _localDomainCellIndices, _filteredValues, u , d);
        }

		//NLM
        else if(std::strcmp(currFilterNode->Value(), "NLM") == 0) {
            //TODO
            std::cout << "ERROR: Filter-Pipeline does not yet support NLM." << std::endl;
            exit(EXIT_FAILURE);
        }
		
	//###############################################################

		//Unknown filter identifier
        else {
			std::cout << "ERROR: Filter-Pipeline does not recognize filter called " << currFilterNode->Value() << std::endl;
            exit(EXIT_FAILURE);
        }

		//global/local filtering
		if(currFilterNode->Attribute("sequential")) {
			if(std::strcmp(currFilterNode->Attribute("sequential"), "true") == 0) _filters.push_back(new coupling::SequentialFilter<dim>(newfilter, _indexConversion));
			else _filters.push_back(newfilter);
		}
		else _filters.push_back(newfilter);

		if(firstIteration){
			inputCellVector = _domainCellVector1;
			firstIteration = false;
		}

		inputCellVector.swap(outputCellVector);
        currFilterNode = currFilterNode->NextSiblingElement();
	}

	#ifdef DEBUG_FILTER_PIPELINE
	std::cout << PRINT_PREFIX() << "Number of Filters: " << _filters.size() <<". Output vector will be ";
	if(_filters.size() % 2 == 0)  std::cout << "_cellVector1." << std::endl;
	else std::cout << "_cellVector2." << std::endl;
	#endif
	
	return 0;
}

template<unsigned int dim>
void coupling::FilterSequence<dim>::addFilter( 	
				const std::function<std::vector<double> (std::vector<double>, std::vector<std::array<unsigned int, dim>>)>* applyScalar,
				const std::function<std::vector<std::array<double, dim>> (std::vector<std::array<double, dim>>, std::vector<std::array<unsigned int, dim>>)>* applyVector,
				int filterIndex //counting starts at 0, -1 is equivalent to EOL
){
	if(_isModifiable) {
		unsigned int index;
		(filterIndex == -1 || filterIndex > (int) _filters.size()) ? index = _filters.size() : index = filterIndex;

		//case: appending	
		if(index ==  _filters.size()) {
			if(_filters.size() % 2 == 0) _filters.push_back(new coupling::FilterFromFunction<dim>(_cellVector1, _cellVector2 , _localDomainCellIndices, _filteredValues, applyScalar, applyVector));
			else _filters.push_back(new coupling::FilterFromFunction<dim>(_cellVector2, _cellVector1 , _localDomainCellIndices, _filteredValues, applyScalar, applyVector));
			#ifdef DEBUG_FILTER_PIPELINE
				std::cout << PRINT_PREFIX() << "Appended new filter to sequence." << std::endl;
			#endif
		}
		//case: inserting
		//TODO: testing
		else {
			if(index % 2 == 0) { 
				_filters.insert(_filters.begin() + index, new coupling::FilterFromFunction<dim>(_cellVector1, _cellVector2 , _localDomainCellIndices, _filteredValues, applyScalar, applyVector));

				// add copy if no copy after index exists, else remove that copy
				if(std::strcmp(_filters[index + 1]->getType(), "COPY") == 0) _filters.erase(_filters.begin() + index +1);
				else _filters.insert(_filters.begin() + index + 1, new coupling::Copy<dim>(_cellVector2, _cellVector1 , _localDomainCellIndices, _filteredValues));
			}
			else {
				_filters.insert(_filters.begin() + index, new coupling::FilterFromFunction<dim>(_cellVector2, _cellVector1 , _localDomainCellIndices, _filteredValues, applyScalar, applyVector));	

				// add copy if no copy after index exists, else remove that copy
				if(std::strcmp(_filters[index + 1]->getType(), "COPY") == 0) _filters.erase(_filters.begin() + index +1);
				else _filters.insert(_filters.begin() + index + 1, new coupling::Copy<dim>(_cellVector1, _cellVector2 , _localDomainCellIndices, _filteredValues));
			}
			#ifdef DEBUG_FILTER_PIPELINE
				std::cout << PRINT_PREFIX() << "Inserted new filter at index " << index << std::endl;
			#endif

		}
	}
	else std::cout << "WARNING: Trying to add filter at runtime to non-modifiable filter sequence " << _name << ". Refused." << std::endl; //exit()?
}


//Private functions of coupling::FilterSequence

template<unsigned int dim>
void coupling::FilterSequence<dim>::initCellVectors(){
	for(auto cell: _inputCellVector){
		_cellVector1.push_back(new coupling::datastructures::MacroscopicCell<dim>(*cell));
    	_cellVector2.push_back(new coupling::datastructures::MacroscopicCell<dim>(*cell));
	}
	#ifdef DEBUG_FILTER_PIPELINE
            std::cout << PRINT_PREFIX() << "Initialized (global) cell vector." << std::endl;
    #endif 
}


//TODO: since domains are now determined at FP-level, this looks deprecated. Especially the out-of-bounds check
template<unsigned int dim>
void coupling::FilterSequence<dim>::initDomain(){
	#ifdef DEBUG_FILTER_PIPELINE
    std::cout << PRINT_PREFIX() << "Initializing domain. Input vector has " << _inputCellVector.size() << " cells. ";
    #endif
    //sanity check
    if(_inputCellVector.size() != _cellIndices.size()){
		std::cout << std::endl << "ERROR: Cell and index vector of sequence out of synch." << std::endl;
		exit(EXIT_FAILURE);
    }
    
    //sanity check
    for(unsigned int d = 0; d < dim; d++) if(_cellIndices.back()[d] < _domainEnd[d]){
		std::cout << std::endl << "ERROR: Sequence domain size larger than MD domain." << std::endl;
		exit(EXIT_FAILURE);
    }

    //sanity check
    for(unsigned int d = 0; d < dim; d++) if(_domainStart[d] > _domainEnd[d]){
		std::cout << std::endl << "ERROR: Filter domain start > domain end." << std::endl;
		exit(EXIT_FAILURE);
    }
    bool outOfBounds;
	for(unsigned int index = 0; index < _inputCellVector.size(); index++){
		outOfBounds = false;
		for(unsigned int d = 0; d < dim; d++) 
			//"index" does not reference the dim-dimensional indices stored in e.g. cellIndices but the cell vecto
			if(_cellIndices[index][d] < _domainStart[d] || _cellIndices[index][d] > _domainEnd[d]) outOfBounds = true;
		if(!outOfBounds){
			_inputDomainCellVector.push_back(_inputCellVector[index]);
			_domainCellVector1.push_back(_cellVector1[index]);
			_domainCellVector2.push_back(_cellVector2[index]);
			_globalDomainCellIndices.push_back(_cellIndices[index]);
			_localDomainCellIndices.push_back(_cellIndices[index]-_domainStart);
		}
	}
	
	#ifdef DEBUG_FILTER_PIPELINE
	std::cout << "Input domain vector has " << _inputDomainCellVector.size() << " cells." << std::endl;
	#endif
}


