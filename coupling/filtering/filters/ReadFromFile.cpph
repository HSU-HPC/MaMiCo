// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

/** Implementation of ReadFromFile.h
 *  @author Felix Maurer
 */

// Member functions of ReadFromFile.h:
template <unsigned int dim> void coupling::filtering::ReadFromFile<dim>::operator()() {
#ifdef DEBUG_READ_FROM_FILE
  std::cout << "		RFF: Now reading input data from: " << _location;
#endif

  _file.open(_location);

  // Skip all lines of previous iterations
  std::string skipstr;
  for (unsigned int s = 0; s < _iteration * ((coupling::filtering::FilterInterface<dim>::_inputCells.size()) + 1); s++)
    std::getline(_file, skipstr);

  // TODO: check if number of lines match number of cells

  for (unsigned int ic_index = 0; ic_index < coupling::filtering::FilterInterface<dim>::_inputCells.size(); ic_index++) {
    // get next input line
    std::string linestr;
    std::getline(_file, linestr);
    std::istringstream lineiss(linestr);

    // store all values from line
    std::vector<double> doublesFromLine;

    // interpret substrings as doubles
    std::string d;
    while (std::getline(lineiss, d, ';')) {
      if (d != " ") { // ignore what comes after last ';'
        doublesFromLine.push_back(std::stod(d));

#ifdef DEBUG_READ_FROM_FILE
        if (ic_index == 0)
          std::cout << "		RFF: New double read for cell 0: " << doublesFromLine.back() << std::endl;
#endif
      }
    }

    // TODO: check if number of doubles match dim*_vectorSetters.size() +
    // _scalarSetters.size()

    // iteration, indexes. Adjust this if write-to-file's output changes!
    const unsigned int const_offset = 1;

    // increases for each double read from line
    unsigned int incr_offset = 0;

    // Apply scalar setters
    for (const auto scalarProperty : coupling::filtering::FilterInterface<dim>::_scalarAccessFunctionPairs) {
      (coupling::filtering::FilterInterface<dim>::_outputCells[ic_index]->*scalarProperty.set)(doublesFromLine[const_offset + incr_offset]);

#ifdef DEBUG_READ_FROM_FILE
      if (ic_index == 0)
        std::cout << "		RFF: Scalar sent to cell 0: " << doublesFromLine[0 /*const_offset + incr_offset*/] << std::endl;
#endif

      incr_offset++;
    }
    // Apply vector setters
    for (const auto vectorProperty : coupling::filtering::FilterInterface<dim>::_vectorAccessFunctionPairs) {
      tarch::la::Vector<dim, double> tempVec;
      for (unsigned int d = 0; d < dim; d++) {
        tempVec[d] = doublesFromLine[const_offset + incr_offset + d];
      }

#ifdef DEBUG_READ_FROM_FILE
      if (ic_index == 0)
        std::cout << "		RFF: Vector sent to cell 0: " << tempVec << std::endl;
#endif

      (coupling::filtering::FilterInterface<dim>::_outputCells[ic_index]->*vectorProperty.set)(tempVec);
      incr_offset += dim;
    }
  }

  _file.close();
  _iteration++;

#ifdef DEBUG_READ_FROM_FILE
  std::cout << " ... done" << std::endl;
#endif
}
