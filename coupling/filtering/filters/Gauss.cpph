// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

/** Implementation of Gauss.h
 *  @author Felix Maurer
 */

//Member functions of Gauss.h:
template<unsigned int dim>
void coupling::Gauss<dim>::operator()(){	
    #ifdef DEBUG_GAUSS
    std::cout << "		GAUSS(Dim: " << _dim << "): Applying filter...";
    #endif 

	//using coupling::FilterInterface<dim>::_inputCells;
	//using coupling::FilterInterface<dim>::_outputCells;


	for(unsigned int index = 0; index < coupling::FilterInterface<dim>::_cellIndices.size(); index++){

		unsigned int indexAbove = getIndexAbove(index, _dim);
		unsigned int indexBelow = getIndexBelow(index, _dim);


		//[0] = below, [1] = at index, [2] = above 
		double weights[3] = {GAUSS_OUTER_WEIGHT, GAUSS_INNER_WEIGHT, GAUSS_OUTER_WEIGHT};

		//only one of these two cases can occur at once
		if(indexBelow == index){
			if(_extrapolationStrategy == 0){
				//This is slightly inaccurate. Total weight is 1.00011 (should be 1).
				weights[0] = 0;
				weights[1] *= 1.38713; 
				weights[2] *= 1.38713;
			}
			else if(_extrapolationStrategy == 1){
				weights[0] = 0;
				//TODO: test this
				for(unsigned int si = 0; si < coupling::FilterInterface<dim>::_scalarSetters.size(); si++)
					(coupling::FilterInterface<dim>::_outputCells[indexAbove]->*(coupling::FilterInterface<dim>::_scalarSetters[si]))(
					(coupling::FilterInterface<dim>::_inputCells[indexAbove]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))()
					+
					(coupling::FilterInterface<dim>::_inputCells[index]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))()*2
					-
					(coupling::FilterInterface<dim>::_inputCells[indexAbove]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))());
				for(unsigned int vi = 0; vi < coupling::FilterInterface<dim>::_scalarSetters.size(); vi++)
					(coupling::FilterInterface<dim>::_outputCells[indexAbove]->*(coupling::FilterInterface<dim>::_scalarSetters[vi]))(
					(coupling::FilterInterface<dim>::_inputCells[indexAbove]->*(coupling::FilterInterface<dim>::_scalarGetters[vi]))()
					+
					(coupling::FilterInterface<dim>::_inputCells[index]->*(coupling::FilterInterface<dim>::_scalarGetters[vi]))()*2
					-
					(coupling::FilterInterface<dim>::_inputCells[indexAbove]->*(coupling::FilterInterface<dim>::_scalarGetters[vi]))());
			}
			else{/*unreachable*/}

		}
		else if(indexAbove == index){
			if(_extrapolationStrategy == 0){
				//This is slightly inaccurate. Total weight is 1.00011 (should be 1).
				weights[0] *= 1.38713;
				weights[1] *= 1.38713;
				weights[2] = 0;
			}
			else if(_extrapolationStrategy == 1){
				weights[0] = 0;
				//TODO: test this
				for(unsigned int si = 0; si < coupling::FilterInterface<dim>::_scalarSetters.size(); si++)
					(coupling::FilterInterface<dim>::_outputCells[indexBelow]->*(coupling::FilterInterface<dim>::_scalarSetters[si]))(
					(coupling::FilterInterface<dim>::_inputCells[indexBelow]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))()
					+
					(coupling::FilterInterface<dim>::_inputCells[index]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))()*2
					-
					(coupling::FilterInterface<dim>::_inputCells[indexBelow]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))());
				for(unsigned int vi = 0; vi < coupling::FilterInterface<dim>::_scalarSetters.size(); vi++)
					(coupling::FilterInterface<dim>::_outputCells[indexBelow]->*(coupling::FilterInterface<dim>::_scalarSetters[vi]))(
					(coupling::FilterInterface<dim>::_inputCells[indexBelow]->*(coupling::FilterInterface<dim>::_scalarGetters[vi]))()
					+
					(coupling::FilterInterface<dim>::_inputCells[index]->*(coupling::FilterInterface<dim>::_scalarGetters[vi]))()*2
					-
					(coupling::FilterInterface<dim>::_inputCells[indexBelow]->*(coupling::FilterInterface<dim>::_scalarGetters[vi]))());
			}
			else{/*unreachable*/}
		}
		//apply to scalars
		for(unsigned int si = 0; si < coupling::FilterInterface<dim>::_scalarSetters.size(); si++){
			(coupling::FilterInterface<dim>::_outputCells[index]->*(coupling::FilterInterface<dim>::_scalarSetters[si]))(
			(coupling::FilterInterface<dim>::_inputCells[indexBelow]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))() * weights[0]
			+(coupling::FilterInterface<dim>::_inputCells[index]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))() * weights[1]
			+(coupling::FilterInterface<dim>::_inputCells[indexAbove]->*(coupling::FilterInterface<dim>::_scalarGetters[si]))() * weights[2]);
		}
		//apply to vectors	
		for(unsigned int vi = 0; vi < coupling::FilterInterface<dim>::_vectorSetters.size(); vi++){
			(coupling::FilterInterface<dim>::_outputCells[index]->*(coupling::FilterInterface<dim>::_vectorSetters[vi]))(
			(coupling::FilterInterface<dim>::_inputCells[indexBelow]->*(coupling::FilterInterface<dim>::_vectorGetters[vi]))() * weights[0]
			+(coupling::FilterInterface<dim>::_inputCells[index]->*(coupling::FilterInterface<dim>::_vectorGetters[vi]))() * weights[1]
			+(coupling::FilterInterface<dim>::_inputCells[indexAbove]->*(coupling::FilterInterface<dim>::_vectorGetters[vi]))() * weights[2]);
		}
	}//index
   
    #ifdef DEBUG_GAUSS
    std::cout << "done." << std::endl;
    #endif
}

//Private functions of Gauss.h: 
template<unsigned int dim>
unsigned int coupling::Gauss<dim>::getIndexAbove(unsigned int index, unsigned int d){
	unsigned int diff = 1;
	//iterate over all lower dimensions
	for(unsigned int ld = 0; ld < d; ld++) diff *= (_lastIndex[ld]+1); //*= size in ld-Dimension
	if(index + diff < coupling::FilterInterface<dim>::_inputCells.size()) return index+diff;
	else return index; //in this case, the lower cell is nonexistant and should have weight 0

	}

template<unsigned int dim>
unsigned int coupling::Gauss<dim>::getIndexBelow(unsigned int index, unsigned int d){
	unsigned int diff = 1;
	//iterate over all lower dimensions
	for(unsigned int ld = 0; ld < d; ld++) diff *= (_lastIndex[ld]+1);
	if(index > diff) return index-diff;
	else return index; //in this case, the upper cell is nonexistant and should have weight 0
} 
