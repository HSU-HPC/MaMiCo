// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

/** Implementation of Gauss.h
 *  @author Felix Maurer
 */

//Member functions of Gauss.h:
template<unsigned int dim>
void coupling::Gauss<dim>::operator()(){	
    #ifdef DEBUG_GAUSS
    std::cout << "		GAUSS: Applying filter...";
    #endif 

	for(unsigned int index = 0; index < coupling::FilterInterface<dim>::_cellIndices.size(); index++){
		#ifdef DEBUG_GAUSS
		std::cout << "START INDEX " << index << std::endl;
		std::cout << "	INIT DIM" << _dim;
		#endif
		coupling::datastructures::MacroscopicCell<dim>* lowerCell;
		coupling::datastructures::MacroscopicCell<dim>* upperCell;
		if(coupling::FilterInterface<dim>::_cellIndices[index][_dim] == 0){
			lowerCell = coupling::FilterInterface<dim>::_inputCells[getUpperCellIndex(index, _dim)]; 
			#ifdef DEBUG_GAUSS 
			std::cout << " L:U " << getUpperCellIndex(index, _dim);
			#endif
		}
		else{
			lowerCell = coupling::FilterInterface<dim>::_inputCells[getLowerCellIndex(index, _dim)]; 
			#ifdef DEBUG_GAUSS
			std::cout << " L:L " << getLowerCellIndex(index, _dim);
			#endif
		}
		if(coupling::FilterInterface<dim>::_cellIndices[index][_dim] == _lastIndex[_dim]){
			upperCell = coupling::FilterInterface<dim>::_inputCells[getLowerCellIndex(index, _dim)];
			#ifdef DEBUG_GAUSS
			std::cout << " U:L " << getLowerCellIndex(index, _dim);//TODO: find other means of interpolation
			#endif
		}
		else{
			upperCell = coupling::FilterInterface<dim>::_inputCells[getUpperCellIndex(index, _dim)]; 
			#ifdef DEBUG_GAUSS
			std::cout << " U:U " << getUpperCellIndex(index, _dim);
			#endif
		}
		#ifdef DEBUG_GAUSS
		std::cout << " PASSED INIT ";
		std::cout << "VECTOR SIZES: IN: " << coupling::FilterInterface<dim>::_inputCells.size() << " OUT: " << coupling::FilterInterface<dim>::_outputCells.size();
		#endif
		//TODO: function pointers
		
		if(_useMicroMass) 
			coupling::FilterInterface<dim>::_outputCells[index]->setMicroscopicMass(
				coupling::FilterInterface<dim>::_inputCells[index]->getMicroscopicMass()*GAUSS_INNER_WEIGHT
				+lowerCell->getMicroscopicMass()*GAUSS_OUTER_WEIGHT
				+upperCell->getMicroscopicMass()*GAUSS_OUTER_WEIGHT);
		if(_useMicroMomentum) 
			coupling::FilterInterface<dim>::_outputCells[index]->setMicroscopicMomentum(
				coupling::FilterInterface<dim>::_inputCells[index]->getMicroscopicMomentum()*GAUSS_INNER_WEIGHT
				+lowerCell->getMicroscopicMomentum()*GAUSS_OUTER_WEIGHT
				+upperCell->getMicroscopicMomentum()*GAUSS_OUTER_WEIGHT);
		if(_useMacroMass) 
			coupling::FilterInterface<dim>::_outputCells[index]->setMacroscopicMass(
				coupling::FilterInterface<dim>::_inputCells[index]->getMacroscopicMass()*GAUSS_INNER_WEIGHT
				+lowerCell->getMacroscopicMass()*GAUSS_OUTER_WEIGHT
				+upperCell->getMacroscopicMass()*GAUSS_OUTER_WEIGHT);
		if(_useMacroMomentum) 
			coupling::FilterInterface<dim>::_outputCells[index]->setMacroscopicMomentum(
				coupling::FilterInterface<dim>::_inputCells[index]->getMacroscopicMomentum()*GAUSS_INNER_WEIGHT
				+lowerCell->getMacroscopicMomentum()*GAUSS_OUTER_WEIGHT
				+upperCell->getMacroscopicMomentum()*GAUSS_OUTER_WEIGHT);
		if(_usePotEnergy) 
			coupling::FilterInterface<dim>::_outputCells[index]->setPotentialEnergy(
				coupling::FilterInterface<dim>::_inputCells[index]->getPotentialEnergy()*GAUSS_INNER_WEIGHT
				+lowerCell->getPotentialEnergy()*GAUSS_OUTER_WEIGHT
				+upperCell->getPotentialEnergy()*GAUSS_OUTER_WEIGHT);
		if(_useVelocity) 
			coupling::FilterInterface<dim>::_outputCells[index]->setCurrentVelocity(
				coupling::FilterInterface<dim>::_inputCells[index]->getCurrentVelocity()*GAUSS_INNER_WEIGHT
				+lowerCell->getCurrentVelocity()*GAUSS_OUTER_WEIGHT
				+upperCell->getCurrentVelocity()*GAUSS_OUTER_WEIGHT);
		if(_useTemperature) 
			coupling::FilterInterface<dim>::_outputCells[index]->setTemperature(
				coupling::FilterInterface<dim>::_inputCells[index]->getTemperature()*GAUSS_INNER_WEIGHT
				+lowerCell->getTemperature()*GAUSS_OUTER_WEIGHT
				+upperCell->getTemperature()*GAUSS_OUTER_WEIGHT); 
		#ifdef DEBUG_GAUSS
		std::cout << "	PASSED APPLICATION" << std::endl; 
		std::cout << "END INDEX " << index << std::endl;
		#endif
	}//index
   
    #ifdef DEBUG_GAUSS
    std::cout << "done." << std::endl;
    #endif
}

template<unsigned int dim>
unsigned int coupling::Gauss<dim>::getLowerCellIndex(unsigned int index, unsigned int d){
	unsigned int diff = 1;
	//iterate over all lower dimensions
	for(unsigned int ld = 0; ld < d; ld++) diff *= (_lastIndex[ld]+1); //*= size in ld-Dimension
	return index-diff;
}

template<unsigned int dim>
unsigned int coupling::Gauss<dim>::getUpperCellIndex(unsigned int index, unsigned int d){
	unsigned int diff = 1;
	//iterate over all lower dimensions
	for(unsigned int ld = 0; ld < d; ld++) diff *= (_lastIndex[ld]+1);
	return index+diff;
} 
