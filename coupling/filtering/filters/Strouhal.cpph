// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

/** Implementation of Strouhal.h
 *  @author Felix Maurer
 */

//Member functions of Strouhal.h:
template<unsigned int dim>
void coupling::Strouhal<dim>::operator()(){	
	double vAvg = 0;
    for(auto cell : coupling::FilterInterface<dim>::_inputCells){
		vAvg += cell->getCurrentVelocity()[1];
    }
	vAvg /= coupling::FilterInterface<dim>::_inputCells.size();

	_v_y.push_back(vAvg);

	coupling::FilterInterfaceReadOnly<dim>::copyInputToOutput();

    #ifdef DEBUG_STROUHAL
    std::cout << "		STROUHAL: Average velocity in y-direction at iteration " << _v_y.size() << " is " << vAvg << std::endl;
    #endif
}

//TODO: move to xml when done testing
#define ACCEPTED_STARTING_APPROXIMATE 0.01
#define ACCEPTED_APPROXIMATE 0.01
#define AMP_LOWER_LIMIT 0.5

//Private functions of Strouhal.h:
template<unsigned int dim>
double coupling::Strouhal<dim>::calculateStrouhalNumber(){
	double f = 0; 	

	//TODO: BIG COMMENT GOES HERE
	double min = *min_element(_v_y.begin(), _v_y.end());
	double max = *max_element(_v_y.begin(), _v_y.end());
	double eq = (min+max)/2;

	#ifdef DEBUG_STROUHAL
		std::cout << std::endl << "		Strouhal: Min: " << min << ", Max: " << max << ", Eq: " << eq << std::endl;
	#endif
	unsigned int intersects = 0;
	bool onCurve = false;
	int firstIntersect = -1;

	for(unsigned int i = 0; i < _v_y.size(); i++){
		if(firstIntersect == -1) {
			if(abs(_v_y[i] - eq) < ACCEPTED_STARTING_APPROXIMATE) {
				firstIntersect = i;
				#ifdef DEBUG_STROUHAL
				std::cout << "			Found first intersect at index " << i << ": " << _v_y[i] << std::endl;
				#endif
			}
		}
		else {
			if(!onCurve && abs(_v_y[i] - _v_y[firstIntersect]) >= AMP_LOWER_LIMIT * abs(eq - min)/* = abs(eq - max)*/ ){ //0.5 is arbitrary. This just makes sure we dont interprete noise as an intersect.
				onCurve = true;
				#ifdef DEBUG_STROUHAL
				std::cout << "			Index " << i << " (" << _v_y[i] << ") is far enough from " << _v_y[firstIntersect] << std::endl;
				#endif
			}
			if(onCurve && abs(_v_y[i] - _v_y[firstIntersect]) < ACCEPTED_APPROXIMATE){
				intersects++;
				onCurve = false;
				#ifdef DEBUG_STROUHAL
				std::cout << "			Found intersect at index " << i << ": " << _v_y[i] << std::endl;
				#endif
			}
		}
		//TODO: this is a phase, not the frequency
		if(intersects == 2) { f = i - firstIntersect; break;}
	}
	#ifdef DEBUG_STROUHAL
		if(intersects < 2) std::cout << "			Did not find enough intersects. Strouhal will be approximated to be 0. " << std::endl;
	#endif

	return (f*_D)/_U;
}
