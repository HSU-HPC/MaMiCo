// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder

template<unsigned int dim>
void coupling::NLM<dim>::operator()(){
  #ifdef NLM_DEBUG
    std::cout << "    NLM: called operator()" << std::endl;
  #endif

  const double sigsq = 0;  // TODO configure
  const double hsq = .45;    // TODO configure

  // Save data
  for(unsigned int i = 0; i < this->_inputCells.size(); ++i){ 
    coupling::filtering::Quantities<dim>& q = _flowfield(this->_cellIndices[i], _t);
    coupling::filtering::Quantities<dim>& qp = _flowfield_prefiltered(this->_cellIndices[i], _t);
    q[0] = this->_inputCellVectors[0][i]->getMacroscopicMass();
    qp[0] = this->_inputCellVectors[1][i]->getMacroscopicMass();
    for (unsigned int d = 0; d < dim; d++){  
      q[d+1] = this->_inputCellVectors[0][i]->getMacroscopicMomentum()[d];
      qp[d+1] = this->_inputCellVectors[1][i]->getMacroscopicMomentum()[d];
    } 
  }
 
  // Update patchfield
  for(auto idx : _innerCellIndices){
    auto idx_inner = idx - tarch::la::Vector<dim,unsigned int>(1);
    if(_cycleCounter > _t) _patchfield.destroy(idx_inner,_t);
    _patchfield.construct(idx_inner, _t,
      tarch::la::Vector<dim,unsigned int>(2*_d+1), 2*_d+1, _flowfield_prefiltered, 
      idx, _t);
  }

  // Main denoising
  for(auto idx : _innerCellIndices){
    auto idx_inner = idx - tarch::la::Vector<dim,unsigned int>(1);
    auto& me = _patchfield(idx_inner, _t);
    double C = 0;
    coupling::filtering::Quantities<dim> res(0);
    int tdist = std::min((int)_timeWindowSize,(int)_cycleCounter+1);

    // TODO restrict loops to bouncing V_i search window
    for(int offset_t = 0; offset_t > -tdist; offset_t--){
      unsigned int t = posmod((int)_t + offset_t,_timeWindowSize);
      for(auto idx2 : _innerCellIndices){
        auto idx2_inner = idx2 - tarch::la::Vector<dim,unsigned int>(1);
        auto& other = _patchfield(idx2_inner, t);
        double dist = me.distance(other);
#ifdef NLM_DEBUG
        //std::cout << "dist = " << dist << std::endl;
#endif
        double weight = std::exp(-  std::max(dist - sigsq ,0.0) / hsq) * 1/(-offset_t +1);
#ifdef NLM_DEBUG        
       //std::cout << "weight = " << weight << std::endl;
#endif
        coupling::filtering::Quantities<dim>&  q = _flowfield(idx2, t);
        res += q * weight;
        C += weight;
      }
    }

    res = res * (1/C);
    unsigned int i = _ic->getLocalCellIndex(idx);

    coupling::JunctorInterface<dim, 2, 1>::_outputCellVectors[0][i]->setMacroscopicMass(res[0]);
    tarch::la::Vector<dim,double> momentum;
    for (unsigned int d = 0; d < dim; d++)  momentum[d] = res[d+1];
    coupling::JunctorInterface<dim, 2, 1>::_outputCellVectors[0][i]->setMacroscopicMomentum(momentum);
  }

  // Increment time
  _cycleCounter++;
  _t = _cycleCounter%_timeWindowSize;
}
