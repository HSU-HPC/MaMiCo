// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

//Member functions of coupling::IndexConversionMD2Macro
template<unsigned int dim>
void coupling::IndexConversionMD2Macro<dim>::initMD2MacroDomain(
				std::vector<coupling::datastructures::MacroscopicCell<dim> *>& inputCells,
				std::vector<coupling::datastructures::MacroscopicCell<dim> *>& m2mDomainCells,
				std::vector<tarch::la::Vector<dim, unsigned int>>& m2mIndices,
				std::vector<coupling::datastructures::MacroscopicCell<dim> *>& outerCells,
				std::vector<tarch::la::Vector<dim, unsigned int>>& outerIndices

) {
	if(inputCells.empty()){
		throw std::runtime_error("ERROR: ICM2M: Input cell vector is emtpy.");
	}

	// number of processes (in linear form)
	unsigned int nprocs = 1;
	for(unsigned int d = 0; d<dim; d++) nprocs *= _ic->getNumberProcesses()[d];

	#ifdef DEBUG_ICM2M
	std::cout << "ICM2M: Initializing md2Macro-domain and outer cells and their index vectors." << std::endl;
	//std::cout << "Now Looking at slice (3,...)" << std::endl;
	//unsigned int i1 = 0;
	#endif

	tarch::la::Vector<dim, unsigned int> convertedIndex;
	tarch::la::Vector<dim, unsigned int> lastMD2MacroIndex(0);
	bool outOfBounds;

	for(unsigned int linearIndex = 0; linearIndex < inputCells.size(); linearIndex++){
		outOfBounds = false;
				
		//removal of ghost layer
		convertedIndex = getLocalVectorCellIndex(linearIndex, false);

		//removal of cells lying in outer layer not meant for transfer to macro solver
		//Assuming: dim > 0, INT_MAX at any position in index vector implies MSI function returns false
		if(!(_msi->receiveMacroscopicQuantityFromMDSolver(_ic->getGlobalVectorCellIndex(_ic->convertLocalToGlobalCellIndex(linearIndex))))) {
			outOfBounds = true; 
		}

		for(unsigned int d = 0; d < dim; d++) {
			if(convertedIndex[d] == INT_MAX) outOfBounds = true;
		}

		#ifdef DEBUG_ICM2M
		//Visualisation of slice (3,...)
		//if(_ic->getThisRank() == 0 && convertedIndex[0] == 3){
		//	(outOfBounds) ? std::cout << "x" : std::cout << "o";
		//	if (i1 <= _ic->getLocalNumberMacroscopicCells()[1]) i1++;
		//	else { std::cout << std::endl; i1 = 0; }
		//}
		#endif

		if(outOfBounds) {
			outerCells.push_back(inputCells[linearIndex]);
			outerIndices.push_back(_ic->getLocalVectorCellIndex(linearIndex));
			std::cout << "ADDED OUTER CELL TO OUTER DOMAIN" << std::endl;
		}
		else {
			if(_localLowerBoundaries == nullptr) _localLowerBoundaries = new tarch::la::Vector<dim, unsigned int>(convertedIndex);
			lastMD2MacroIndex = convertedIndex;
			m2mDomainCells.push_back(inputCells[linearIndex]);
			m2mIndices.push_back(convertedIndex);
		}
	}
	//Probably segfaults if rank has 0 M2M cells. Should never be the case (?)
	_localUpperBoundaries = new tarch::la::Vector<dim, unsigned int>(lastMD2MacroIndex);

	
	#if (COUPLING_MD_PARALLEL==COUPLING_MD_YES)	
	//Broadcast global boundaries. This assumes that the lowest rank of the communicator has the lower bound, while the highest one has the upper bound.

	//use linear indexing for easier MPI communication
	unsigned int linearGlobalLowerBoundaries;
	unsigned int linearGlobalUpperBoundaries;

	if(_myRank ==  _lowestRank) {
		//sanity check
		if(_localLowerBoundaries == nullptr) throw std::runtime_error("ERROR: ICM2M: Lowest rank in communicator has no M2M domain cells. This implies an empty M2M domain!");
		else _globalLowerBoundaries = new tarch::la::Vector<dim, unsigned int>(*_localLowerBoundaries); //should be the same as _ic->convertLocalToGlobalVectorCellIndex(_localLowerBoundaries)
	} else _globalLowerBoundaries = new tarch::la::Vector<dim, unsigned int>(0);

	if(_ic->getThisRank() ==  nprocs-1) { //last process 
		_globalUpperBoundaries = new tarch::la::Vector<dim, unsigned int>(_ic->convertLocalToGlobalVectorCellIndex(*_localUpperBoundaries));
	} else _globalUpperBoundaries = new tarch::la::Vector<dim, unsigned int>(0);

	linearGlobalLowerBoundaries = _ic->getGlobalCellIndex(*_globalLowerBoundaries);
	linearGlobalUpperBoundaries = _ic->getGlobalCellIndex(*_globalUpperBoundaries);

	MPI_Bcast(&linearGlobalLowerBoundaries, 1, MPI_UNSIGNED, _lowestRank, _comm);
	MPI_Bcast(&linearGlobalUpperBoundaries, 1, MPI_UNSIGNED, nprocs-1, _comm); //last process
	
	//convert back to vector
	(*_globalLowerBoundaries) = _ic->getGlobalVectorCellIndex(linearGlobalLowerBoundaries);
	(*_globalUpperBoundaries) = _ic->getGlobalVectorCellIndex(linearGlobalUpperBoundaries);

	#ifdef DEBUG_ICM2M
	std::cout << "ICM2M: Rank: " << _ic->getThisRank() << " Total number of cells/md2Macro domain cells: " << inputCells.size() << "/" << m2mDomainCells.size() << std::endl;
	std::cout << "ICM2M: Rank: " << _ic->getThisRank() << " Local lowest/highest index in M2M domain: " << *_localLowerBoundaries << "/" << *_localUpperBoundaries << std::endl;
	std::cout << "ICM2M: Rank: " << _ic->getThisRank() << " Global lowest/highest index in M2M domain: " << *_globalLowerBoundaries << "/" << *_globalUpperBoundaries << std::endl;
	#endif

	#endif
}

template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversionMD2Macro<dim>::getGlobalVectorCellIndex(unsigned int globalCellIndex, bool noGL) const {
	tarch::la::Vector<dim, unsigned int> globalVectorCellIndex = _ic->getGlobalVectorCellIndex(globalCellIndex);
	//if(_rank == 0){
	//	std::cout << "Global: " << globalCellIndex << " GlobalVector: " << globalVectorCellIndex;
	//}
	for(unsigned int d = 0; d < dim; d++) {
		if(globalVectorCellIndex[d] < 1 || globalVectorCellIndex[d] > _ic->getGlobalNumberMacroscopicCells()[d]-3) globalVectorCellIndex[d] = INT_MAX;
		else if(noGL) globalVectorCellIndex[d] -= 1;
	}
	//if(_rank == 0){
	//	std::cout <<  " Converted: " << globalVectorCellIndex << std::endl;
	//}
	return globalVectorCellIndex;
}

template<unsigned int dim>
tarch::la::Vector<dim,unsigned int> coupling::IndexConversionMD2Macro<dim>::getLocalVectorCellIndex(unsigned int localCellIndex, bool noGL) const {
	tarch::la::Vector<dim, unsigned int> localVectorCellIndex = _ic->getLocalVectorCellIndex(localCellIndex);
	for(unsigned int d = 0; d < dim; d++) {
		if(localVectorCellIndex[d] < 1 || localVectorCellIndex[d] > _ic->getLocalNumberMacroscopicCells()[d]) localVectorCellIndex[d] = INT_MAX;
		else if(noGL) localVectorCellIndex[d] -= 1;
	}
	return localVectorCellIndex;
}
