// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template <class CellIndexT, unsigned int dim>
const coupling::datastructures::CouplingCell<dim>* coupling::datastructures::CellContainer<CellIndexT, dim>::operator[](CellIndexT idx) const {
#if (COUPLING_MD_ERROR == COUPLING_MD_YES)
  if (_couplingCells.size() < CellIndexT::linearNumberCellsInDomain) {
    std::cout << "CellContainer<" << CellIndexT::TNAME << "," << dim << "> accessed but not full " << std::endl;
    std::exit(EXIT_FAILURE);
  }
#endif
  return _couplingCells[indexing::convertToScalar(idx)];
}

template <class CellIndexT, unsigned int dim> void coupling::datastructures::CellContainer<CellIndexT, dim>::operator<<(CouplingCell<dim>* couplingCell) {
#if (COUPLING_MD_ERROR == COUPLING_MD_YES)
  if (_couplingCells.size() >= CellIndexT::linearNumberCellsInDomain) {
    std::cout << "CellContainer<" << CellIndexT::TNAME << "," << dim << "> can only hold " << CellIndexT::linearNumberCellsInDomain << " coupling cells!"
              << std::endl;
    std::exit(EXIT_FAILURE);
  }
#endif
  _couplingCells.push_back(couplingCell);
}
