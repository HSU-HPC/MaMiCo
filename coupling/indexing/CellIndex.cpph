//Implementation of coupling::indexing::CellIndex

//TODO: operator+- for Indices

using namespace coupling::indexing;
/*
 * Using:
 * 	coupling::indexing::IndexType
 * 	coupling::indexing::CellIndex
 *	coupling::indexing::BaseIndexType
 */

template<unsigned int dim, IndexType idx_T>
template<IndexType convert_to_T>
CellIndex<dim, idx_T>::operator CellIndex<dim, convert_to_T>() const { 

	//conversion: identical IndexType -> "copy constructor"
	if constexpr (idx_T == convert_to_T) {
		return CellIndex<dim, idx_T> { _index }; 
	}

	//conversion: non-BaseIndex -> BaseIndex
	if constexpr (convert_to_T == BaseIndexType) {
		//convert to vector if neccessary, then add offset, then construct a BaseIndex from that tarch::la::Vector
		return CellIndex<dim, BaseIndexType> { convertToVector<dim, idx_T>(*this).get() + CellIndex<dim, idx_T>::lowerBoundary.get() } ;
	}

	//conversion: BaseIndex -> non-BaseIndex
	if constexpr (idx_T == BaseIndexType) {
		//convert to scalar if neccessary + construct CellIndex<dim, convert_to_T>
		if constexpr(convert_to_T.vector) {
			return CellIndex<dim, convert_to_T> { (*this - CellIndex<dim, convert_to_T>::lowerBoundary).get() };
		}
		else /* convert_to_T.vector == false */ {
			//get scalar version of i_vec by first constructing a BaseIndex and then converting it
			const unsigned int i_sca = convertToScalar<dim, BaseIndexType>(*this - CellIndex<dim, convert_to_T>::lowerBoundary).get();	

			return CellIndex<dim, convert_to_T> { i_sca };
		}
	}
	std::cout << "case 4 " << std::endl;

	//conversion: non-BaseIndex -> different non-BaseIndex
	//call this -> BaseIndexType conversion
	CellIndex<dim, BaseIndexType> b { *this };
	//call BaseIndex -> target index type conversion
	return CellIndex<dim, convert_to_T> { b };

} 

//Overloading operator<< for CellIndex
template<unsigned int dim, coupling::indexing::IndexType idx_T>
std::ostream& operator<<(std::ostream& os, const CellIndex<dim, idx_T>& i) {
	os << i.get();
	return os;
}

//Overloading arithmetic operators for CellIndex using friend functions
template<unsigned int dim, IndexType idx_T>
CellIndex<dim, idx_T> operator+(
		const CellIndex<dim, idx_T>& i1,
		const CellIndex<dim, idx_T>& i2
) { return CellIndex<dim, idx_T> { i1._index + i2._index }; }

template<unsigned int dim, coupling::indexing::IndexType idx_T>
coupling::indexing::CellIndex<dim, idx_T> operator-(
		const CellIndex<dim, idx_T>& i1,
		const CellIndex<dim, idx_T>& i2
) { return CellIndex<dim, idx_T> { i1._index - i2._index }; }
