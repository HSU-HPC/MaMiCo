//Implementation of coupling::indexing::CellIndex

//TODO: operator+- for Indices

using namespace coupling::indexing;
/*
 * Using:
 * 	coupling::indexing::IndexType
 * 	coupling::indexing::CellIndex
 *	coupling::indexing::BaseIndexType
 */

template<unsigned int dim, IndexType idx_T>
template<IndexType convert_to_T>
CellIndex<dim, idx_T>::operator CellIndex<dim, convert_to_T>() const { 

	//conversion: identical IndexType -> "copy constructor"
	if constexpr (idx_T == convert_to_T) {
		return CellIndex<dim, idx_T>(_index); 
	}

	//conversion: non-BaseIndex -> BaseIndex
	if constexpr (convert_to_T == BaseIndexType) {
		//Step 1: convert to vector if neccessary
		tarch::la::Vector<dim, unsigned int> i_vec = convertToVector<dim, idx_T>(*this).get();
		//Step 2: add offset
		i_vec += CellIndex<dim, idx_T>::lowerBoundary.get(); 
		//Step 3: construct BaseIndex
		return CellIndex<dim, BaseIndexType>(i_vec); 
	}

	//conversion: BaseIndex -> non-BaseIndex
	if constexpr (idx_T == BaseIndexType) {
		//step 1: subtract offset
		tarch::la::Vector<dim, unsigned int> i_vec = _index - CellIndex<dim, convert_to_T>::lowerBoundary.get();
		//step 2: convert to scalar if neccessary + construct CellIndex<dim, convert_to_T>
		if constexpr(convert_to_T.vector) {
			return CellIndex<dim, convert_to_T>(i_vec);
		}
		else {
			//get scalar version of i_vec by first constructing a BaseIndex and then converting it
			const unsigned int i_sca = convertToScalar<dim, BaseIndexType>(BaseIndex(i_vec)).get();	

			return CellIndex<dim, convert_to_T>(i_sca);
		}
	}

	//conversion: non-BaseIndex -> different non-BaseIndex
	//call this -> BaseIndexType conversion
	CellIndex<dim, BaseIndexType> b = *this;
	//call BaseIndex -> target index type conversion
	return CellIndex<dim, convert_to_T>(b);

} 

//Overloading operator<< for CellIndex
template<unsigned int dim, coupling::indexing::IndexType idx_T>
std::ostream& operator<<(std::ostream& os, const CellIndex<dim, idx_T>& i) {
	os << i.get();
	return os;
}

//Overloading arithmetic operators for CellIndex using friend functions
template<unsigned int dim, IndexType idx_T>
CellIndex<dim, idx_T> operator+(
		const CellIndex<dim, idx_T>& i1,
		const CellIndex<dim, idx_T>& i2
) { return CellIndex<dim, idx_T>(i1._index + i2._index); }

template<unsigned int dim, coupling::indexing::IndexType idx_T>
coupling::indexing::CellIndex<dim, idx_T> operator-(
		const CellIndex<dim, idx_T>& i1,
		const CellIndex<dim, idx_T>& i2
) { return CellIndex<dim, idx_T>(i1._index - i2._index); }
