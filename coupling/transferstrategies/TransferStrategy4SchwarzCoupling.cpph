// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico


template<class LinkedCell,unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::
beginProcessInnerMacroscopicCellsBeforeReceivingMacroscopicSolverData(){
  // reset sample counter
  _sampleCounter = 0;
}

template<class LinkedCell,unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::
processInnerMacroscopicCellAfterReceivingMacroscopicSolverData(
  coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim> &cell, const unsigned int &index
){

  // convert momentum to velocity values for cont->MD transfer
  if (cell.getMicroscopicMass()==0.0){
    cell.setMicroscopicMomentum(tarch::la::Vector<dim,double>(0.0));
  } else {
    cell.setMicroscopicMomentum((1.0/cell.getMicroscopicMass())*cell.getMicroscopicMomentum());
    #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
    std::cout << "Obtain reference velocity " << cell.getMicroscopicMomentum() << " in cell " << index << std::endl;
    #endif
  }

  // currently: no mass transfer anywhere
  cell.setMicroscopicMass(0.0);

  // reset macroscopic solver values (from averaging) and store old mass
  cell.setMacroscopicMass(0.0);
  cell.setMacroscopicMomentum(tarch::la::Vector<dim,double>(0.0));
}

template<class LinkedCell,unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::
processOuterMacroscopicCellAfterReceivingMacroscopicSolverData(
  coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim> &cell, const unsigned int &index
){
    if (cell.getMicroscopicMass()==0.0){
      cell.setMicroscopicMomentum(tarch::la::Vector<dim,double>(0.0));
    } else {
      cell.setMicroscopicMomentum((1.0/cell.getMicroscopicMass())*cell.getMicroscopicMomentum());
      #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
      std::cout << "Obtain reference velocity " << cell.getMicroscopicMomentum() << " in cell " << index << std::endl;
      #endif
    }
    cell.setMicroscopicMass(0.0);
    cell.setMacroscopicMass(0.0);
    cell.setMacroscopicMomentum(tarch::la::Vector<dim,double>(0.0));
}


template<class LinkedCell,unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::
processInnerMacroscopicCellBeforeSendingMDSolverData(
  coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim> &cell, const unsigned int &index
){
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  std::cout << "processInnerMacroscopicCellBeforeSendingMDSolverData(): Data before averaging from cell " << index << "Mass: " << cell.getMacroscopicMass() << " , momentum: " << cell.getMacroscopicMomentum() << std::endl;
  #endif

  // average sampled data from MD
  if (_sampleCounter != 0){
    const double mass = cell.getMacroscopicMass()/((double)_sampleCounter);
    const tarch::la::Vector<dim,double> momentum = (1.0/((double)_sampleCounter))*cell.getMacroscopicMomentum();
    cell.setMacroscopicMass(mass);
    cell.setMacroscopicMomentum(momentum);
  } else {
    cell.setMacroscopicMass(0.0);
    cell.setMacroscopicMomentum(tarch::la::Vector<dim,double>(0.0));
  }
  #if (COUPLING_MD_DEBUG==COUPLING_MD_YES)
  std::cout << "Samplecounter=" << _sampleCounter << std::endl;
  std::cout <<  "processInnerMacroscopicCellBeforeSendingMDSolverData(): Data from cell " << index << "Mass: " << cell.getMacroscopicMass() << " , momentum: " << cell.getMacroscopicMomentum() << std::endl;
  #endif
}


template<class LinkedCell,unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::processOuterMacroscopicCellBeforeSendingMDSolverData(
  coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim> &cell, const unsigned int &index
){
  cell.setMacroscopicMass(0.0);
  cell.setMacroscopicMomentum(tarch::la::Vector<dim,double>(0.0));
}


template<class LinkedCell,unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::beginProcessInnerMacroscopicCellsAfterMDTimestep(){
  _timestepCounter++;
  if (sample()){ _sampleCounter++; }
}


template<class LinkedCell,unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::
processInnerMacroscopicCellAfterMDTimestep(
  coupling::datastructures::MacroscopicCellWithLinkedCells<LinkedCell,dim> &cell, const unsigned int &index
){
  // averaging: evaluate current state
  if (sample()){
    cell.iterateConstCells(_massMapping);
    const double mass = _massMapping.getMass();
    cell.iterateConstCells(_momentumMapping);
    const tarch::la::Vector<dim,double> momentum = _momentumMapping.getMomentum();
    cell.addMacroscopicMass(mass);
    cell.addMacroscopicMomentum(momentum);
  }
}



template<class LinkedCell,unsigned int dim>
bool coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell,dim>::sample() const{
 // sample strategy: for a hard-coded time-limit, sample only over 20% of coupling cycle
 const unsigned int timestepInThisCouplingCycle = _timestepCounter % _numberMDSteps;
 return (   (timestepInThisCouplingCycle > 0.8*_numberMDSteps-1)
         && ((_timestepCounter-1)%_sampleEveryTimestep==0));
}

