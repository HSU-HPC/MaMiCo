// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico

template <class LinkedCell, unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::beginProcessInnerCouplingCellsBeforeReceivingMacroscopicSolverData() {
  // reset sample counter
  _sampleCounter = 0;
}

template <class LinkedCell, unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::processInnerCouplingCellAfterReceivingMacroscopicSolverData(
    coupling::datastructures::CouplingCellWithLinkedCells<LinkedCell, dim>& cell, I02 index) {
  // convert momentum to velocity values for cont->MD transfer
  if (cell.getMicroscopicMass() == 0.0) {
    cell.setMicroscopicMomentum(tarch::la::Vector<dim, double>(0.0));
  } else {
    cell.setMicroscopicMomentum((1.0 / cell.getMicroscopicMass()) * cell.getMicroscopicMomentum());
  }
  // currently: no mass transfer anywhere
  cell.setMicroscopicMass(0.0);
  // reset macroscopic solver values (from averaging) and store old mass
  cell.setMacroscopicMass(0.0);
  cell.setMacroscopicMomentum(tarch::la::Vector<dim, double>(0.0));
}

template <class LinkedCell, unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::processOuterCouplingCellAfterReceivingMacroscopicSolverData(
    coupling::datastructures::CouplingCellWithLinkedCells<LinkedCell, dim>& cell, I02 index) {
  if (cell.getMicroscopicMass() == 0.0) {
    cell.setMicroscopicMomentum(tarch::la::Vector<dim, double>(0.0));
  } else {
    cell.setMicroscopicMomentum((1.0 / cell.getMicroscopicMass()) * cell.getMicroscopicMomentum());
  }
  cell.setMicroscopicMass(0.0);
  cell.setMacroscopicMass(0.0);
  cell.setMacroscopicMomentum(tarch::la::Vector<dim, double>(0.0));
}

template <class LinkedCell, unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::processInnerCouplingCellBeforeSendingMDSolverData(
    coupling::datastructures::CouplingCellWithLinkedCells<LinkedCell, dim>& cell, I02 index) {
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  std::cout << "processInnerCouplingCellBeforeSendingMDSolverData(): Data "
               "before averaging from cell "
            << index << "Mass: " << cell.getMacroscopicMass() << " , momentum: " << cell.getMacroscopicMomentum() << std::endl;
#endif
  // average sampled data from MD
  if (_sampleCounter != 0) {
    const double mass = cell.getMacroscopicMass() / ((double)_sampleCounter);
    const tarch::la::Vector<dim, double> momentum = (1.0 / ((double)_sampleCounter)) * cell.getMacroscopicMomentum();
    cell.setMacroscopicMass(mass);
    cell.setMacroscopicMomentum(momentum);
  } else {
    cell.setMacroscopicMass(0.0);
    cell.setMacroscopicMomentum(tarch::la::Vector<dim, double>(0.0));
  }
#if (COUPLING_MD_DEBUG == COUPLING_MD_YES)
  std::cout << "Samplecounter=" << _sampleCounter << std::endl;
  std::cout << "processInnerCouplingCellBeforeSendingMDSolverData(): Data "
               "from cell "
            << index << "Mass: " << cell.getMacroscopicMass() << " , momentum: " << cell.getMacroscopicMomentum() << std::endl;
#endif
}

template <class LinkedCell, unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::processOuterCouplingCellBeforeSendingMDSolverData(
    coupling::datastructures::CouplingCellWithLinkedCells<LinkedCell, dim>& cell, I02 index) {
  cell.setMacroscopicMass(0.0);
  cell.setMacroscopicMomentum(tarch::la::Vector<dim, double>(0.0));
}

template <class LinkedCell, unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::beginProcessInnerCouplingCellsAfterMDTimestep() {
  _timestepCounter++;
  if (sample()) {
    _sampleCounter++;
  }
}

template <class LinkedCell, unsigned int dim>
void coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::processInnerCouplingCellAfterMDTimestep(
    coupling::datastructures::CouplingCellWithLinkedCells<LinkedCell, dim>& cell, I02 index) {
  // averaging: evaluate current state
  if (sample()) {
    cell.iterateConstCells(_massMapping);
    const double mass = _massMapping.getMass();
    cell.iterateConstCells(_momentumMapping);
    const tarch::la::Vector<dim, double> momentum = _momentumMapping.getMomentum();
    cell.addMacroscopicMass(mass);
    cell.addMacroscopicMomentum(momentum);
  }
}

template <class LinkedCell, unsigned int dim> bool coupling::transferstrategies::TransferStrategy4SchwarzCoupling<LinkedCell, dim>::sample() const {
  // sample strategy: for a hard-coded time-limit, sample only over 20% of
  // coupling cycle
  const unsigned int timestepInThisCouplingCycle = _timestepCounter % _numberMDSteps;
  return ((timestepInThisCouplingCycle > 0.8 * _numberMDSteps - 1) && ((_timestepCounter - 1) % _sampleEveryTimestep == 0));
}
