// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// =============================---==============
#ifndef __EXA_COUETTE_FV_Variables_CLASS_HEADER__
#define __EXA_COUETTE_FV_Variables_CLASS_HEADER__

#include "AbstractEXA_COUETTE_FV.h"

#include <algorithm>

#include "tarch/la/Matrix.h"

/**
 * Generic information about the variable string as it was declared in the
 * specification file
 **/
struct couette::AbstractEXA_COUETTE_FV::VariableMetrics {
  static constexpr int numDistinctVariables = 3;
  static constexpr int SizeVariables  = 5; 
  static constexpr int SizeParameters = 0;
  static constexpr int Size           = 5+0;
  static constexpr int Dimensions     = DIMENSIONS;
};

/**
 * Positions of fields in the vector of unkonwns.
 *
 * With these constants, you can write Q[g11], Q[K22] and Q[B33] instead of
 * Q[0], Q[9] and Q[34]. Your code is meaningful in terms of physics while
 * you still access on a C-array level.
 *
 * You might want to use a typedef to shorten the notation or create 
 * an instance of this class.
 **/
class couette::AbstractEXA_COUETTE_FV::VariableShortcuts : public couette::AbstractEXA_COUETTE_FV::VariableMetrics {
public:
  /// positions of fields inside the unknown vector (solution vector) Q
  const int _Q[numDistinctVariables + 1] = { 0,1,4 };

  const int rho = 0;
  const int u = 1;
  const int E = 4;

  const int* asArray() const { return _Q; }
  int operator [] (int index) const { return _Q[index]; }
  int operator () (int index) const { return _Q[index]; }
}; // end of VariableShortcuts

/**
 * Lengths (multplicities) of each field inside the unknown vector Q.
 * For instance, 0 means "scalar field" while any value >0 may mean a vector field or
 * even a "linearized" tensor field
 **/
class couette::AbstractEXA_COUETTE_FV::VariableMultiplicities : public couette::AbstractEXA_COUETTE_FV::VariableMetrics {
public:
  /// positions of fields inside the unknown vector (solution vector) Q
 
  const int _Q[numDistinctVariables] = { 1,3,1 };

  const int rho = 1;
  const int u = 3;
  const int E = 1;

  const int* asArray() const { return _Q; }
  int operator [] (int index) const { return _Q[index]; }
  int operator () (int index) const { return _Q[index]; }
}; // end of VariableMultiplicities

/**
 * Variable names as strings as given in the toolkit.
 * 
 * These names might want to be used for plotting, output, etc.
 *
 **/
class couette::AbstractEXA_COUETTE_FV::VariableNames : public couette::AbstractEXA_COUETTE_FV::VariableMetrics {
public:
  char const *_Q[numDistinctVariables + 1] = { "rho","u","E" };

  const char* rho = "rho";
  const char* u = "u";
  const char* E = "E";

  const char* const* asArray() const { return _Q; } // type: whatever
  const char* operator [] (int index) const { return _Q[index]; }
  const char* operator () (int index) const { return _Q[index]; }
}; // end of VariableNames

/**
 * Positions of fields in the vector of unknowns,
 * available as namespace constants.
 * 
 * You can use this namespace similar to the class "VariableShortcuts"
 * but you don't need an object, ie. your notation can get slimmer.
 * 
 * Usage is like:
 * 
 *    void somewhere() {
 *       using namespace couette::EXA_COUETTE_FV_Variables::shortcuts;
 *       Q[foo] = 17;
 *    }
 *
 * instead of
 * 
 *    void somewhere() {
 *       couette::AbstractEXA_COUETTE_FV::VariableNames q;
 *       Q[q.foo] = 17;
 *    }
 *
 **/
namespace couette {
  namespace EXA_COUETTE_FV_Variables {
    namespace shortcuts {
      constexpr int rho = 0;
      constexpr int u = 1;
      constexpr int E = 4;
    } // namespace shortcuts
    namespace names {
      constexpr char rho[] = "rho"; 
      constexpr char u[] = "u"; 
      constexpr char E[] = "E"; 
    } // namespace names
  } // end of namespace couette::EXA_COUETTE_FV_Variables 
} // end of namespace couette

/*
 * Another class idea:
 * 
 * class ....::VariablePointers {
 *   private:   double* Q;
 *   public:
 *      double &varfoo;
 *      double &varbar;
 *      VariablePointers(double* const Q) : varfoo(Q[0]), bar(Q[1]), ... {}
 * }
 * 
 * Advantages: Use as positions in Q.
 *
 */


class couette::AbstractEXA_COUETTE_FV::ReadOnlyVariables : public couette::AbstractEXA_COUETTE_FV::VariableMetrics {
  private:
    const double* const _Q;
  public:
    ReadOnlyVariables(const double* const Q) : _Q(Q) {}
    
    double operator [] (int index) const {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    double operator () (int index) const {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    const double* data() const {
      return _Q;
    }
    
    int size() const {
      return Size;
    }
    
    int variables() const {
      return SizeVariables;
    }
    
    int parameters() const {
      return SizeParameters;
    }

    // getter and setter for rho
    double rho() const {return _Q[0];}
        
    // getters for u 
    double u(int index) const {
      assertion(index >= 0 && index<3);
      return _Q[1+index];
    }
    tarch::la::Vector<3,double> u() const {
      tarch::la::Vector<3,double> values;
      values=_Q[1],_Q[2],_Q[3];
      return values;
    }
        
    // getter and setter for E
    double E() const {return _Q[4];}
        
}; // end of ReadOnlyVariables


class couette::AbstractEXA_COUETTE_FV::Variables : public couette::AbstractEXA_COUETTE_FV::VariableMetrics{
  private:
    double* _Q;
  public:
    static constexpr int SizeVariables  = 5;
    static constexpr int SizeParameters = 0;
    static constexpr int Size           = 5+0;
  
    Variables(double* const Q) : _Q(Q) {}
    
    void operator = (Variables& variables) {
      std::copy(variables.data(),variables.data()+Size,_Q);
    }
    
    void operator = (ReadOnlyVariables& variables) {
      assertion(variables.variables()==SizeVariables);
      assertion(variables.parameters()==SizeParameters);
      assertion(variables.size()==Size);
      std::copy(variables.data(),variables.data()+Size,_Q);
    }
    
    double& operator [] (int index) {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    double& operator () (int index) {
      assertion(index>=0 && index < Size);
      return _Q[index];
    }
    
    double* data() {
      return _Q;
    }
    
    int size() const {
      return Size;
    }
    
    int variables() const {
      return SizeVariables;
    }
    
    int parameters() const {
      return SizeParameters;
    }

    // getter and setter for rho
    double rho() const {return _Q[0];}
    double& rho() {return _Q[0];}
    
    // getters for u 
    double u(int index) const {
      assertion(index >= 0 && index<3);
      return _Q[1+index];
    }
    tarch::la::Vector<3,double> u() const {
      tarch::la::Vector<3,double> values;
      values=_Q[1],_Q[2],_Q[3];
      return values;
    }
    // setters for u
    double& u(int index) {return _Q[1+index];}
    void u(const tarch::la::Vector<3,double>& values) const {
      _Q[1] = values[0];
      _Q[2] = values[1];
      _Q[3] = values[2];
    }
    void u(double u0,double u1,double u2) {
      _Q[1] = u0;
      _Q[2] = u1;
      _Q[3] = u2;
    }
    
    // getter and setter for E
    double E() const {return _Q[4];}
    double& E() {return _Q[4];}
    
}; // end of Variables


class couette::AbstractEXA_COUETTE_FV::Fluxes : public couette::AbstractEXA_COUETTE_FV::VariableMetrics {
  private:
    double** _F;
  public:
    Fluxes(double** const F) : _F(F) {}
    
    /** The rows of the flux tensor. */
    int variables() const {
      return SizeVariables;
    }
    
    /** The columns of the flux tensor. */
    int dimensions() const {
      return Dimensions;
    }


    // getters for rho
    double rho(int column) const {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][0];
    }
    tarch::la::Vector<DIMENSIONS,double> rho() const {
      #if DIMENSIONS==2 
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][0],_F[1][0]);
      #elif DIMENSIONS==3 
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][0],_F[1][0],_F[2][0]);
      #endif
      return values;
    }
    // setters for rho
    double& rho(int column) {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][0];
    }

    void rho(const tarch::la::Vector<DIMENSIONS,double>& values) {
      _F[0][0] = values[0];
      _F[1][0] = values[1];
      #if DIMENSIONS==3
      _F[2][0] = values[2];
      #endif
    }

    #if DIMENSIONS==2
    // setter for 2.5D calculations. Third vector element is ignored.*/;
    void rho(const tarch::la::Vector<3,double>& values) {
      _F[0][0] = values[0];
      _F[1][0] = values[1];
    }
    #endif

    // setter for 3D and 2.5D calculations. Third argument is ignored for the latter.
    void rho(double v0,double v1,double v2) {
      _F[0][0] = v0;
      _F[1][0] = v1;
      #if DIMENSIONS==3
      _F[2][0] = v2;
      #endif
    }
    
    #if DIMENSIONS==2
    void rho(double v0,double v1) {
      _F[0][0] = v0;
      _F[1][0] = v1;
    }
    #endif
    // getters for u
    double u(int row, int column) const {
      assertion(row >= 0 && row<3);
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][1+row];
    }
    tarch::la::Vector<DIMENSIONS,double> u(int row) const {
      assertion(row >= 0 && row<3);
      #if DIMENSIONS==2
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][1+row],_F[1][1+row]);
      #elif DIMENSIONS==3 
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][1+row],_F[1][1+row],_F[2][1+row]);
      #endif
      return values;
    }
    tarch::la::Matrix<3,DIMENSIONS,double> u() const {
      tarch::la::Matrix<3,DIMENSIONS,double> values;
      #if DIMENSIONS==2
      values = 
_F[0][1+0],_F[1][1+0],
_F[0][1+1],_F[1][1+1],
_F[0][1+2],_F[1][1+2];
      #elif DIMENSIONS==3
      values = 
_F[0][1+0],_F[1][1+0],_F[2][1+0],
_F[0][1+1],_F[1][1+1],_F[2][1+1],
_F[0][1+2],_F[1][1+2],_F[2][1+2];
      #endif
      return values;
    }
    // setters for u
    double& u(int row, int column) {
      assertion(row >= 0 && row<3);
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][1+row];
    }

    void u(const tarch::la::Matrix<3,DIMENSIONS,double>& values) {
      _F[0][1+0] = values(0,0);
      _F[0][1+1] = values(1,0);
      _F[0][1+2] = values(2,0);
      _F[1][1+0] = values(0,1);
      _F[1][1+1] = values(1,1);
      _F[1][1+2] = values(2,1);
      #if DIMENSIONS==3
      _F[2][1+0] = values(0,2);
      _F[2][1+1] = values(1,2);
      _F[2][1+2] = values(2,2);
      #endif
    }
    #if DIMENSIONS==2
    // setter for 2.5D calculations. Third matrix column is ignored.*/;
    void u(const tarch::la::Matrix<3,3,double>& values) {
      _F[0][1+0] = values(0,0);
      _F[0][1+1] = values(1,0);
      _F[0][1+2] = values(2,0);
      _F[1][1+0] = values(0,1);
      _F[1][1+1] = values(1,1);
      _F[1][1+2] = values(2,1);
    }
    #endif
      
    // setter for 3D and 2.5D calculations. Third argument is ignored for the latter.
    void u(int row, double v0,double v1,double v2) {
      assertion(row >= 0 && row<3);
      _F[0][1+row] = v0;
      _F[1][1+row] = v1;
      #if DIMENSIONS==3
      _F[2][1+row] = v2;
      #endif
    }
    #if DIMENSIONS==2
    // setter for 2D calculations.*/;
    void u(int row, double v0,double v1) {
      assertion(row >= 0 && row<3);
      _F[0][1+row] = v0;
      _F[1][1+row] = v1;
    }
    #endif

    // setter for 3D and 2.5D calculations. Third column values are ignored for the latter.
    void u(double v00,double v01,double v02,double v10,double v11,double v12,double v20,double v21,double v22) {
      _F[0][1+0] = v00;
      _F[0][1+1] = v10;
      _F[0][1+2] = v20;
      _F[1][1+0] = v01;
      _F[1][1+1] = v11;
      _F[1][1+2] = v21;
      #if DIMENSIONS==3
      _F[2][1+0] = v02;
      _F[2][1+1] = v12;
      _F[2][1+2] = v22;
      #endif
    }
    #if DIMENSIONS==2
    void u(double v00,double v01,double v10,double v11,double v20,double v21) {
      _F[0][1+0] = v00;
      _F[0][1+1] = v10;
      _F[0][1+2] = v20;
      _F[1][1+0] = v01;
      _F[1][1+1] = v11;
      _F[1][1+2] = v21;
    }
    #endif
    // getters for E
    double E(int column) const {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][4];
    }
    tarch::la::Vector<DIMENSIONS,double> E() const {
      #if DIMENSIONS==2 
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][4],_F[1][4]);
      #elif DIMENSIONS==3 
      tarch::la::Vector<DIMENSIONS,double> values(_F[0][4],_F[1][4],_F[2][4]);
      #endif
      return values;
    }
    // setters for E
    double& E(int column) {
      assertion(column >= 0 && column<DIMENSIONS);
      return _F[column][4];
    }

    void E(const tarch::la::Vector<DIMENSIONS,double>& values) {
      _F[0][4] = values[0];
      _F[1][4] = values[1];
      #if DIMENSIONS==3
      _F[2][4] = values[2];
      #endif
    }

    #if DIMENSIONS==2
    // setter for 2.5D calculations. Third vector element is ignored.*/;
    void E(const tarch::la::Vector<3,double>& values) {
      _F[0][4] = values[0];
      _F[1][4] = values[1];
    }
    #endif

    // setter for 3D and 2.5D calculations. Third argument is ignored for the latter.
    void E(double v0,double v1,double v2) {
      _F[0][4] = v0;
      _F[1][4] = v1;
      #if DIMENSIONS==3
      _F[2][4] = v2;
      #endif
    }
    
    #if DIMENSIONS==2
    void E(double v0,double v1) {
      _F[0][4] = v0;
      _F[1][4] = v1;
    }
    #endif
}; // end of Fluxes

// NamingSchemes:

#endif