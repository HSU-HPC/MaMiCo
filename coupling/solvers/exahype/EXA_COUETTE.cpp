// This file is generated by the ExaHyPE toolkit.
// Please do not modify - it will be overwritten by the next
// ExaHyPE toolkit call.
// 
// ========================
//   www.exahype.eu
// ========================
// ==============================================
// Please do not change the implementations below
// ==============================================
#include "EXA_COUETTE.h"

#include "kernels/limiter/generic/Limiter.h"

couette::EXA_COUETTE::EXA_COUETTE(
        const double maximumMeshSize,
        const int maximumMeshDepth,
        const int haloCells,
        const int regularisedFineGridLevels,
        const exahype::solvers::Solver::TimeStepping timeStepping,
        const int DMPObservables,
        const double DMPRelaxationParameter,
        const double DMPDifferenceScaling
) :
  exahype::solvers::LimitingADERDGSolver::LimitingADERDGSolver(
      "EXA_COUETTE",
    new couette::EXA_COUETTE_ADERDG(
      maximumMeshSize,maximumMeshDepth,haloCells,regularisedFineGridLevels,timeStepping,DMPObservables),
    new couette::EXA_COUETTE_FV(
      maximumMeshSize, timeStepping),
    DMPRelaxationParameter,
    DMPDifferenceScaling) {}

void couette::EXA_COUETTE::projectOnFVLimiterSpace(const double* const luh, double* const lim) const {
  kernels::limiter::generic::c::projectOnFVLimiterSpace<Order+1,NumberOfVariables+NumberOfParameters,GhostLayerWidth>(luh, lim);
}

void couette::EXA_COUETTE::projectOnDGSpace(const double* const lim, double* const luh) const {
  kernels::limiter::generic::c::projectOnDGSpace<Order+1,NumberOfVariables+NumberOfParameters,GhostLayerWidth>(lim, luh);
}

bool couette::EXA_COUETTE::discreteMaximumPrincipleAndMinAndMaxSearch(const double* const luh, double* const boundaryMinPerVariables, double* const boundaryMaxPerVariables) {
  return kernels::limiter::generic::c::discreteMaximumPrincipleAndMinAndMaxSearch<AbstractEXA_COUETTE_ADERDG, NumberOfDMPObservables, GhostLayerWidth>(luh, *static_cast<AbstractEXA_COUETTE_ADERDG*>(_solver.get()), _DMPMaximumRelaxationParameter, _DMPDifferenceScaling, boundaryMinPerVariables, boundaryMaxPerVariables);
}

void couette::EXA_COUETTE::findCellLocalMinAndMax(const double* const luh, double* const localMinPerVariables, double* const localMaxPerVariable) {
  kernels::limiter::generic::c::findCellLocalMinAndMax<AbstractEXA_COUETTE_ADERDG, NumberOfDMPObservables>(luh, *static_cast<AbstractEXA_COUETTE_ADERDG*>(_solver.get()), localMinPerVariables, localMaxPerVariable);
}
void couette::EXA_COUETTE::findCellLocalLimiterMinAndMax(const double* const lim, double* const localMinPerObservable, double* const localMaxPerObservable) {
  kernels::limiter::generic::c::findCellLocalLimiterMinAndMax<AbstractEXA_COUETTE_ADERDG, NumberOfDMPObservables, GhostLayerWidth>(lim, *static_cast<AbstractEXA_COUETTE_ADERDG*>(_solver.get()), localMinPerObservable,localMaxPerObservable);
}