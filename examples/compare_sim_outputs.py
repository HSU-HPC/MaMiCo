#! /usr/bin/env python3

"""
Compares the output generated by two simulation runs qualitatively.
Output files are paired by their suffix ("<timestep>.<extension>").
Why? Allows for easy comparison of the simulation output between different implementations
(e.g. verify correctness of simulation after non-trivial refactoring)
"""

__author__ = "Ruben"

import sys
from pathlib import Path
import pandas as pd

SIGNIFICANT_DIFFERENCE_THRESHOLD = 1e-32

if len(sys.argv) != 3 or any(s in sys.argv for s in ["-h", "--help"]):
    the_script = Path(sys.argv[0]).name
    some_path = "path/to/sim/output/dir"
    print(f"Usage: {the_script} {some_path}A {some_path}B", file=sys.stderr)
    exit(1)

output_dir_a = Path(sys.argv[1])
assert (output_dir_a.exists())
output_dir_b = Path(sys.argv[2])
assert (output_dir_b.exists())


def compare_csv(a, b, header=None, sep=";"):
    def read_csv(f):
        df = pd.read_csv(f, header=header, sep=sep)
        return df.dropna(axis=1)
    df_a = read_csv(a)
    df_b = read_csv(b)
    if any(df_a.columns != df_b.columns):
        print(f"Columns of {a} and {b} do not match")
    if len(df_a) != len(df_b):
        print(f"Number of lines of {a} and {b} do not match")
    diff_rows_mask = (
        (df_a - df_b).abs() >= SIGNIFICANT_DIFFERENCE_THRESHOLD).any(axis=1)
    diff_rows_count = sum(
        1 if d else 0 for d in diff_rows_mask)
    if diff_rows_count > 0:
        print(f'{diff_rows_count}/{len(df_a)} rows have significant differences')
        df_diff = df_a - df_b
        # Filter out rows that match
        df_diff = df_diff.loc[(
            df_diff >= SIGNIFICANT_DIFFERENCE_THRESHOLD).any(axis=1)]
        # print('Differences below')
        # print('... as percentage')
        # df_diff = 100 * df_diff / df_a
        # print(df_diff)
    else:
        print('Equal')


def join_dicts(a, b):
    a = a.copy()
    b = b.copy()
    joined = {}
    for k in list(a.keys()):
        if k in b:
            joined[k] = (a[k], b[k])
            a.pop(k)
            b.pop(k)
    return joined, a, b


def get_output_files(output_dir, file_extension):
    return {str(p)[str(p).rindex("_")+1:]: p for p in Path(output_dir).glob("*" + file_extension)}


file_type_to_comparator = {
    ".csv": compare_csv,
    ".vtk": None
}

for e in file_type_to_comparator:
    if file_type_to_comparator[e] is None:
        print(f"No comparator set up for {e} files", file=sys.stderr)
        continue
    output_files_a = get_output_files(output_dir_a, e)
    output_files_b = get_output_files(output_dir_b, e)

    output_file_pairs, unpaired_a, unpaired_b = join_dicts(
        output_files_a, output_files_b)
    unpaired = list(unpaired_a.values()) + list(unpaired_b.values())
    if len(unpaired) > 0:
        print("Could not pair files:", file=sys.stderr)
        for f in unpaired:
            print(f"\t{f}",  file=sys.stderr)

    keys = list(output_file_pairs.keys())
    keys.sort(key=lambda v: int(''.join(c for c in v if c.isnumeric())))

    for k in keys:
        print('..._', k, sep='')
        compare_csv(*output_file_pairs[k])
        print()
