// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico
#ifndef _MOLECULARDYNAMICS_SERVICES_RANDOMNUMBERSERVICE_H_
#define _MOLECULARDYNAMICS_SERVICES_RANDOMNUMBERSERVICE_H_

#include "tarch/TarchDefinitions.h"
#include "tarch/la/Vector.h"
#include <iostream>

namespace tarch {
namespace utils {
class RandomNumberService;
}
} // namespace tarch

namespace tarch {
// These helper functions are neither accurate nor fast!
// Generally, std::sin(), std::cos() and log() should be preferred in almost all cases!
// However, these functions provide reproducibility - independent of std::sin() implementation / compiler / system
// Thus, they can be helpful for debugging in some cases, where bitwise reproducible results are required

double simple_sin(double x);
double simple_cos(double x);
double simple_log(double x);
} // namespace tarch

#if (TARCH_DEBUG == TARCH_YES)
#define TARCH_SIN tarch::simple_sin
#define TARCH_COS tarch::simple_cos
#define TARCH_LOG tarch::simple_log
#else
#define TARCH_SIN std::sin
#define TARCH_COS std::cos
#define TARCH_LOG std::log
#endif

/** creates random numbers.
 *  @author Philipp Neumann
 */
class tarch::utils::RandomNumberService {
public:
  static RandomNumberService& getInstance();

  void init(bool fixSeed = false);

  void shutdown();

  /** returns a uniform random number distributed over the unit interval */
  double getUniformRandomNumber() const;

  /** returns a gaussian random number with zero mean and unit variance, generated by the Polar method */
  double getGaussianRandomNumber();

  bool tarchDebugIsOn() const;

private:
  RandomNumberService() {}
  ~RandomNumberService() {}

  tarch::la::Vector<2, double> _randomNumbers;

  bool _isFirstRandomNumber;
  bool _isInitialized{false};
};
#endif // _MOLECULARDYNAMICS_SERVICES_RANDOMNUMBERSERVICE_H_
