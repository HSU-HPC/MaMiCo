// Copyright (C) 2015 Technische Universitaet Muenchen
// This file is part of the Mamico project. For conditions of distribution
// and use, please see the copyright notice in Mamico's main folder, or at
// www5.in.tum.de/mamico
#ifndef _TARCH_LA_VECTOROPERATIONS_H_
#define _TARCH_LA_VECTOROPERATIONS_H_

/** this file contains some methods for vector types.
 *  @author Philipp Neumann
 */
namespace tarch{
namespace la {

// adds two vectors and returns the result
template<int size, class T>
tarch::la::Vector<size,T> operator+(
  const tarch::la::Vector<size,T> &l,
  const tarch::la::Vector<size,T> &r){
  tarch::la::Vector<size,T> result;
  for (int i = 0; i < size; i++){ result[i] = l[i]+r[i]; }
  return result;
}

// subtracts two vectors and returns the result
template<int size, class T>
tarch::la::Vector<size,T> operator-(
  const tarch::la::Vector<size,T> &l,
  const tarch::la::Vector<size,T> &r){
  tarch::la::Vector<size,T> result;
  for (int i = 0; i < size; i++){ result[i] = l[i]-r[i]; }
  return result;
}


// multiplies a scalar and a vector and returns the resulting vector
template<int size,class T>
tarch::la::Vector<size,T> operator*(
  const tarch::la::Vector<size,T>& v,
  const T& s
){
  tarch::la::Vector<size,T> result;
  for (int i = 0; i < size; i++){ result[i] = v[i]*s; }
  return result;
}
template<int size,class T>
tarch::la::Vector<size,T> operator*(
  const T& s,
  const tarch::la::Vector<size,T>& v
){
  tarch::la::Vector<size,T> result;
  for (int i = 0; i < size; i++){ result[i] = v[i]*s; }
  return result;
}


// computes the inner product of two vectors
template<int size,class T>
T dot(const tarch::la::Vector<size,T> &l, const tarch::la::Vector<size,T>& r){
  T t = l[0]*r[0];
  for (int i = 1; i < size; i++){ t += l[i]*r[i]; }
  return t;
}

// for comparison of two vectors
template<int size,class T>
bool operator==(const Vector<size,T> &l, const Vector<size,T> &r){
  bool equal=true;
  for (int i = 0; i < size; i++){ equal = equal && (l[i]==r[i]); }
  return equal;
}
template<int size,class T>
bool operator!=(const Vector<size,T> &l, const Vector<size,T> &r){
  for (int i = 0; i < size; i++){ if (l[i] != r[i]) return true; }
  return false;
}

// computes the L2-norm
template<int size,class T>
T norm2(const Vector<size,T> &v){
  return sqrt(tarch::la::dot(v,v));
}

/** for output purposes */
template<int size,class T>
std::ostream& operator<< (std::ostream &os,const tarch::la::Vector<size,T>& v) {
  for (int i = 0; i < size-1; i++){
    os << v[i] << " , ";
  }
  os << v[size-1];
  return os;
}


}
}
#endif
